<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\Nucleo_rtos_basic_v2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\Nucleo_rtos_basic_v2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Thu Jan  2 18:31:39 2020
<BR><P>
<H3>Maximum Stack Usage =        768 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
pre_main &rArr; main &rArr; $Super$$main &rArr; main_th() &rArr; processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;) &rArr; Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[25c]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::find(char, unsigned) const</a>
 <LI><a href="#[1b7]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(const char*) const</a>
 <LI><a href="#[1b2]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const</a>
 <LI><a href="#[263]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by_and_replace(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char*)</a>
 <LI><a href="#[19f]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)</a>
 <LI><a href="#[1aa]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::assign(const char*)</a>
 <LI><a href="#[265]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::assign(const char*, unsigned)</a>
 <LI><a href="#[267]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)</a>
 <LI><a href="#[1a4]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::push_back(char)</a>
 <LI><a href="#[25f]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)</a>
 <LI><a href="#[3bb]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)</a>
 <LI><a href="#[268]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::~basic_string()</a>
 <LI><a href="#[53]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::~basic_string__sub_object()</a>
 <LI><a href="#[95]">__cxa_pure_virtual</a>
 <LI><a href="#[269]">abort_message</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1cd]">core_util_critical_section_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d8]">mbed_assert_internal</a><BR>
 <LI><a href="#[2d4]">mbed_error_printf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[298]">mbed_error_vfprintf</a><BR>
 <LI><a href="#[2ac]">pin_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d8]">mbed_assert_internal</a><BR>
 <LI><a href="#[186]">Set_GPIO_Clock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[2ad]">pin_function</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d8]">mbed_assert_internal</a><BR>
 <LI><a href="#[29c]">gpio_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d8]">mbed_assert_internal</a><BR>
 <LI><a href="#[1ce]">sleep_manager_lock_deep_sleep</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[285]">core_util_atomic_incr_u16</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d1]">core_util_critical_section_exit</a><BR>
 <LI><a href="#[1d0]">sleep_manager_unlock_deep_sleep</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[284]">core_util_atomic_decr_u16</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d1]">core_util_critical_section_exit</a><BR>
 <LI><a href="#[159]">EvrRtxThreadError</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[2b6]">initialize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d8]">mbed_assert_internal</a><BR>
 <LI><a href="#[339]">pinmap_pinout</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[337]">pinmap_peripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[336]">pinmap_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[2b5]">init_uart</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[157]">EvrRtxMutexError</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[130]">_sys_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[272]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[153]">error</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[116]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[116]">_sys_exit</a><BR>
 <LI><a href="#[282]">atomic_link_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[282]">atomic_link_get</a><BR>
 <LI><a href="#[88]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[88]">osRtxIdleThread</a><BR>
 <LI><a href="#[281]">atomic_dec32_nz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[281]">atomic_dec32_nz</a><BR>
 <LI><a href="#[17b]">atomic_inc32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17b]">atomic_inc32</a><BR>
 <LI><a href="#[180]">atomic_dec16_nz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">atomic_dec16_nz</a><BR>
 <LI><a href="#[178]">atomic_dec32_nz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[178]">atomic_dec32_nz</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[40]">COMP_ACQ_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[20]">COMP_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[1f]">DAC_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Channel1_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel2_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel3_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel4_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel5_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[22]">LCD_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from .\build\irq_cm3.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[38]">SPI3_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from .\build\irq_cm3.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from .\build\irq_cm3.o(.text) referenced 2 times from .\build\rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[9]">SysTick_Handler</a> from .\build\irq_cm3.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from .\build\system_clock.o(.text.SystemInit) referenced from .\build\startup_stm32l152xe.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[24]">TIM10_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[25]">TIM11_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[37]">TIM5_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[23]">TIM9_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[34]">USB_FS_WKUP_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from .\build\startup_stm32l152xe.o(.text) referenced from .\build\startup_stm32l152xe.o(RESET)
 <LI><a href="#[af]">_GLOBAL__sub_I_SPI.cpp</a> from .\build\spi.o(.text._GLOBAL__sub_I_SPI.cpp) referenced from .\build\spi.o(.init_array)
 <LI><a href="#[b1]">_GLOBAL__sub_I_Tokenizer.cpp</a> from .\build\tokenizer.o(.text._GLOBAL__sub_I_Tokenizer.cpp) referenced from .\build\tokenizer.o(.init_array)
 <LI><a href="#[b0]">_GLOBAL__sub_I_main.cpp</a> from .\build\main.o(.text._GLOBAL__sub_I_main.cpp) referenced from .\build\main.o(.init_array)
 <LI><a href="#[4a]">ISR_thread()</a> from .\build\main.o(.text._Z10ISR_threadv) referenced 2 times from .\build\main.o(.text._Z7main_thv)
 <LI><a href="#[48]">send_alive()</a> from .\build\main.o(.text._Z10send_alivev) referenced 2 times from .\build\main.o(.text._Z10send_alivev)
 <LI><a href="#[48]">send_alive()</a> from .\build\main.o(.text._Z10send_alivev) referenced 2 times from .\build\main.o(.text.main)
 <LI><a href="#[47]">newInput()</a> from .\build\main.o(.text._Z8newInputv) referenced 2 times from .\build\main.o(.text._Z10ISR_threadv)
 <LI><a href="#[47]">newInput()</a> from .\build\main.o(.text._Z8newInputv) referenced 2 times from .\build\main.o(.text._Z7main_thv)
 <LI><a href="#[b2]">_ZL17default_idle_hookv</a> from .\build\mbed_rtx_idle.o(.text._ZL17default_idle_hookv) referenced from .\build\mbed_rtx_idle.o(.data._ZL14idle_hook_fptr)
 <LI><a href="#[4b]">_ZL18equeue_tick_updatev</a> from .\build\equeue_mbed.o(.text._ZL18equeue_tick_updatev) referenced 2 times from .\build\equeue_mbed.o(.text._ZL16equeue_tick_initv)
 <LI><a href="#[4c]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced 2 times from .\build\serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i)
 <LI><a href="#[8f]">mbed::SerialBase::lock()</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBase4lockEv) referenced from .\build\serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
 <LI><a href="#[90]">mbed::SerialBase::unlock()</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBase6unlockEv) referenced from .\build\serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
 <LI><a href="#[92]">mbed::SerialBase::~SerialBase__deallocating()</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBaseD0Ev) referenced from .\build\serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
 <LI><a href="#[91]">mbed::SerialBase::~SerialBase__sub_object()</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBaseD2Ev) referenced from .\build\serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
 <LI><a href="#[4d]">mbed::TimerEvent::irq(unsigned)</a> from .\build\timerevent.o(.text._ZN4mbed10TimerEvent3irqEj) referenced 2 times from .\build\timerevent.o(.text._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[94]">mbed::TimerEvent::~TimerEvent__deallocating()</a> from .\build\timerevent.o(.text._ZN4mbed10TimerEventD0Ev) referenced from .\build\timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
 <LI><a href="#[93]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from .\build\timerevent.o(.text._ZN4mbed10TimerEventD2Ev) referenced from .\build\timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
 <LI><a href="#[4e]">mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)</a> from .\build\interruptin.o(.text._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event) referenced 2 times from .\build\interruptin.o(.text._ZN4mbed11InterruptInC2E7PinName)
 <LI><a href="#[97]">mbed::InterruptIn::~InterruptIn__deallocating()</a> from .\build\interruptin.o(.text._ZN4mbed11InterruptInD0Ev) referenced from .\build\interruptin.o(.rodata._ZTVN4mbed11InterruptInE)
 <LI><a href="#[54]">mbed::InterruptIn::~InterruptIn()</a> from .\build\interruptin.o(.text._ZN4mbed11InterruptInD2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.1)
 <LI><a href="#[54]">mbed::InterruptIn::~InterruptIn()</a> from .\build\interruptin.o(.text._ZN4mbed11InterruptInD2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.2)
 <LI><a href="#[96]">mbed::InterruptIn::~InterruptIn__sub_object()</a> from .\build\interruptin.o(.text._ZN4mbed11InterruptInD2Ev) referenced from .\build\interruptin.o(.rodata._ZTVN4mbed11InterruptInE)
 <LI><a href="#[52]">mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer__sub_object()</a> from .\build\spi.o(.text._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED2Ev) referenced 2 times from .\build\spi.o(.text.__cxx_global_var_init)
 <LI><a href="#[99]">mbed::Ticker::handler()</a> from .\build\ticker.o(.text._ZN4mbed6Ticker7handlerEv) referenced from .\build\ticker.o(.rodata._ZTVN4mbed6TickerE)
 <LI><a href="#[98]">mbed::Ticker::~Ticker__deallocating()</a> from .\build\ticker.o(.text._ZN4mbed6TickerD0Ev) referenced from .\build\ticker.o(.rodata._ZTVN4mbed6TickerE)
 <LI><a href="#[59]">mbed::Ticker::~Ticker__sub_object()</a> from .\build\ticker.o(.text._ZN4mbed6TickerD2Ev) referenced from .\build\ticker.o(.rodata._ZTVN4mbed6TickerE)
 <LI><a href="#[59]">mbed::Ticker::~Ticker__sub_object()</a> from .\build\ticker.o(.text._ZN4mbed6TickerD2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.44)
 <LI><a href="#[9f]">void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</a> from .\build\eventqueue.o(.text._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi) referenced from .\build\eventqueue.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[a1]">void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</a> from .\build\eventqueue.o(.text._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv) referenced from .\build\eventqueue.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[a0]">void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</a> from .\build\eventqueue.o(.text._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv) referenced from .\build\eventqueue.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[a2]">void mbed::Callback&lang;void()&rang;::function_call&lang;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;&rang;(const void*)</a> from .\build\mbed_shared_queues.o(.text._ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvPKv) referenced from .\build\mbed_shared_queues.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvRKT_E3ops)
 <LI><a href="#[a5]">void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</a> from .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv) referenced from .\build\atcmdparser.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[a4]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;&rang;(void*)</a> from .\build\mbed_shared_queues.o(.text._ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvPv) referenced from .\build\mbed_shared_queues.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvRKT_E3ops)
 <LI><a href="#[a7]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</a> from .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv) referenced from .\build\atcmdparser.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[a3]">void mbed::Callback&lang;void()&rang;::function_move&lang;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;&rang;(void*, const void*)</a> from .\build\mbed_shared_queues.o(.text._ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvPvPKv) referenced from .\build\mbed_shared_queues.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvRKT_E3ops)
 <LI><a href="#[a6]">void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</a> from .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv) referenced from .\build\atcmdparser.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[9a]">mbed::RawSerial::lock()</a> from .\build\rawserial.o(.text._ZN4mbed9RawSerial4lockEv) referenced from .\build\rawserial.o(.rodata._ZTVN4mbed9RawSerialE)
 <LI><a href="#[9b]">mbed::RawSerial::unlock()</a> from .\build\rawserial.o(.text._ZN4mbed9RawSerial6unlockEv) referenced from .\build\rawserial.o(.rodata._ZTVN4mbed9RawSerialE)
 <LI><a href="#[9c]">mbed::RawSerial::~RawSerial__deallocating()</a> from .\build\rawserial.o(.text._ZN4mbed9RawSerialD0Ev) referenced from .\build\rawserial.o(.rodata._ZTVN4mbed9RawSerialE)
 <LI><a href="#[5a]">mbed::RawSerial::~RawSerial__sub_object()</a> from .\build\greentea_serial.o(.text._ZN4mbed9RawSerialD2Ev) referenced from .\build\rawserial.o(.rodata._ZTVN4mbed9RawSerialE)
 <LI><a href="#[5a]">mbed::RawSerial::~RawSerial__sub_object()</a> from .\build\greentea_serial.o(.text._ZN4mbed9RawSerialD2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.7)
 <LI><a href="#[57]">rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::~MemoryPool__sub_object()</a> from .\build\main.o(.text._ZN4rtos10MemoryPoolI9message_tLj16EED2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.39)
 <LI><a href="#[56]">rtos::Mutex::~Mutex()</a> from .\build\mutex.o(.text._ZN4rtos5MutexD2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.15)
 <LI><a href="#[56]">rtos::Mutex::~Mutex()</a> from .\build\mutex.o(.text._ZN4rtos5MutexD2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.41)
 <LI><a href="#[58]">rtos::Queue&lang;message_t, (unsigned)16&rang;::~Queue__sub_object()</a> from .\build\main.o(.text._ZN4rtos5QueueI9message_tLj16EED2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.40)
 <LI><a href="#[4f]">rtos::Thread::_thunk(void*)</a> from .\build\thread.o(.text._ZN4rtos6Thread6_thunkEPv) referenced 2 times from .\build\thread.o(.text._ZN4rtos6Thread5startEN4mbed8CallbackIFvvEEE)
 <LI><a href="#[9e]">rtos::Thread::~Thread__deallocating()</a> from .\build\thread.o(.text._ZN4rtos6ThreadD0Ev) referenced from .\build\thread.o(.rodata._ZTVN4rtos6ThreadE)
 <LI><a href="#[55]">rtos::Thread::~Thread()</a> from .\build\thread.o(.text._ZN4rtos6ThreadD2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.10)
 <LI><a href="#[55]">rtos::Thread::~Thread()</a> from .\build\thread.o(.text._ZN4rtos6ThreadD2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.9)
 <LI><a href="#[9d]">rtos::Thread::~Thread__sub_object()</a> from .\build\thread.o(.text._ZN4rtos6ThreadD2Ev) referenced from .\build\thread.o(.rodata._ZTVN4rtos6ThreadE)
 <LI><a href="#[50]">CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</a> from .\build\serialbase.o(.text._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E) referenced 2 times from .\build\serialbase.o(.text._ZN6CThunkIN4mbed10SerialBaseEE4initEPS1_MS1_FvPvES4_)
 <LI><a href="#[49]">events::EventQueue::dispatch_forever()</a> from .\build\mbed_shared_queues.o(.text._ZN6events10EventQueue16dispatch_foreverEv) referenced 2 times from .\build\main.o(.text._Z7main_thv)
 <LI><a href="#[5b]">events::EventQueue::~EventQueue()</a> from .\build\eventqueue.o(.text._ZN6events10EventQueueD2Ev) referenced 2 times from .\build\main.o(.text.__cxx_global_var_init.8)
 <LI><a href="#[53]">std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::~basic_string__sub_object()</a> from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev) referenced 4 times from .\build\main.o(.text.__cxx_global_var_init)
 <LI><a href="#[95]">__cxa_pure_virtual</a> from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual) referenced from .\build\timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
 <LI><a href="#[42]">__main</a> from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main) referenced from .\build\startup_stm32l152xe.o(.text)
 <LI><a href="#[43]">_get_lc_ctype</a> from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code) referenced from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text)
 <LI><a href="#[46]">_printf_input_char</a> from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text) referenced from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text)
 <LI><a href="#[44]">_snputc</a> from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text) referenced from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text)
 <LI><a href="#[45]">_sputc</a> from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text) referenced from I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__2sprintf.o)(.text)
 <LI><a href="#[5c]">gpio_irq0</a> from .\build\gpio_irq_api.o(.text.gpio_irq0) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[5d]">gpio_irq1</a> from .\build\gpio_irq_api.o(.text.gpio_irq1) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[5e]">gpio_irq2</a> from .\build\gpio_irq_api.o(.text.gpio_irq2) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[5f]">gpio_irq3</a> from .\build\gpio_irq_api.o(.text.gpio_irq3) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[60]">gpio_irq4</a> from .\build\gpio_irq_api.o(.text.gpio_irq4) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[61]">gpio_irq5</a> from .\build\gpio_irq_api.o(.text.gpio_irq5) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[62]">gpio_irq6</a> from .\build\gpio_irq_api.o(.text.gpio_irq6) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[87]">osRtxEventFlagsPostProcess</a> from .\build\rtx_evflags.o(.text.osRtxEventFlagsPostProcess) referenced 2 times from .\build\rtx_evflags.o(.text.svcRtxEventFlagsNew)
 <LI><a href="#[88]">osRtxIdleThread</a> from .\build\mbed_rtx_handlers.o(.text.osRtxIdleThread) referenced 2 times from .\build\rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[8a]">osRtxMemoryPoolPostProcess</a> from .\build\rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) referenced 2 times from .\build\rtx_mempool.o(.text.svcRtxMemoryPoolNew)
 <LI><a href="#[8b]">osRtxMessageQueuePostProcess</a> from .\build\rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced 2 times from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[8c]">osRtxSemaphorePostProcess</a> from .\build\rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced 2 times from .\build\rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[8e]">osRtxThreadPostProcess</a> from .\build\rtx_thread.o(.text.osRtxThreadPostProcess) referenced 2 times from .\build\rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[89]">osRtxTimerThread</a> from .\build\rtx_timer.o(.text.osRtxTimerThread) referenced 2 times from .\build\rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[77]">osRtxTimerTick</a> from .\build\rtx_timer.o(.text.osRtxTimerTick) referenced 2 times from .\build\rtx_timer.o(.text.osRtxTimerThread)
 <LI><a href="#[8d]">osThreadExit</a> from .\build\rtx_thread.o(.text.osThreadExit) referenced 2 times from .\build\rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[63]">pre_main</a> from .\build\mbed_boot.o(.text.pre_main) referenced 2 times from .\build\mbed_boot.o(.text.mbed_start_main)
 <LI><a href="#[64]">svcRtxDelay</a> from .\build\rtx_delay.o(.text.svcRtxDelay) referenced 2 times from .\build\rtx_delay.o(.text.osDelay)
 <LI><a href="#[65]">svcRtxEventFlagsDelete</a> from .\build\rtx_evflags.o(.text.svcRtxEventFlagsDelete) referenced 2 times from .\build\rtx_evflags.o(.text.osEventFlagsDelete)
 <LI><a href="#[66]">svcRtxEventFlagsNew</a> from .\build\rtx_evflags.o(.text.svcRtxEventFlagsNew) referenced 2 times from .\build\rtx_evflags.o(.text.osEventFlagsNew)
 <LI><a href="#[67]">svcRtxEventFlagsWait</a> from .\build\rtx_evflags.o(.text.svcRtxEventFlagsWait) referenced 2 times from .\build\rtx_evflags.o(.text.osEventFlagsWait)
 <LI><a href="#[68]">svcRtxKernelGetState</a> from .\build\rtx_kernel.o(.text.svcRtxKernelGetState) referenced 2 times from .\build\rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[69]">svcRtxKernelInitialize</a> from .\build\rtx_kernel.o(.text.svcRtxKernelInitialize) referenced 2 times from .\build\rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[6a]">svcRtxKernelStart</a> from .\build\rtx_kernel.o(.text.svcRtxKernelStart) referenced 2 times from .\build\rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[6b]">svcRtxMemoryPoolAlloc</a> from .\build\rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) referenced 2 times from .\build\rtx_mempool.o(.text.osMemoryPoolAlloc)
 <LI><a href="#[6c]">svcRtxMemoryPoolDelete</a> from .\build\rtx_mempool.o(.text.svcRtxMemoryPoolDelete) referenced 2 times from .\build\rtx_mempool.o(.text.osMemoryPoolDelete)
 <LI><a href="#[6d]">svcRtxMemoryPoolFree</a> from .\build\rtx_mempool.o(.text.svcRtxMemoryPoolFree) referenced 2 times from .\build\rtx_mempool.o(.text.osMemoryPoolFree)
 <LI><a href="#[6e]">svcRtxMemoryPoolNew</a> from .\build\rtx_mempool.o(.text.svcRtxMemoryPoolNew) referenced 2 times from .\build\rtx_mempool.o(.text.osMemoryPoolNew)
 <LI><a href="#[6f]">svcRtxMessageQueueDelete</a> from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) referenced 2 times from .\build\rtx_msgqueue.o(.text.osMessageQueueDelete)
 <LI><a href="#[70]">svcRtxMessageQueueGet</a> from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced 2 times from .\build\rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[71]">svcRtxMessageQueueNew</a> from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced 2 times from .\build\rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[72]">svcRtxMessageQueuePut</a> from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced 2 times from .\build\rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[73]">svcRtxMutexAcquire</a> from .\build\rtx_mutex.o(.text.svcRtxMutexAcquire) referenced 2 times from .\build\rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[74]">svcRtxMutexDelete</a> from .\build\rtx_mutex.o(.text.svcRtxMutexDelete) referenced 2 times from .\build\rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[75]">svcRtxMutexNew</a> from .\build\rtx_mutex.o(.text.svcRtxMutexNew) referenced 2 times from .\build\rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[76]">svcRtxMutexRelease</a> from .\build\rtx_mutex.o(.text.svcRtxMutexRelease) referenced 2 times from .\build\rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[78]">svcRtxSemaphoreDelete</a> from .\build\rtx_semaphore.o(.text.svcRtxSemaphoreDelete) referenced 2 times from .\build\rtx_semaphore.o(.text.osSemaphoreDelete)
 <LI><a href="#[79]">svcRtxSemaphoreNew</a> from .\build\rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced 2 times from .\build\rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[7a]">svcRtxSemaphoreRelease</a> from .\build\rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced 2 times from .\build\rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[7c]">svcRtxThreadExit</a> from .\build\rtx_thread.o(.text.svcRtxThreadExit) referenced 2 times from .\build\rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[7d]">svcRtxThreadFlagsSet</a> from .\build\rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced 2 times from .\build\rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[7e]">svcRtxThreadFlagsWait</a> from .\build\rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced 2 times from .\build\rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[7f]">svcRtxThreadGetId</a> from .\build\rtx_thread.o(.text.svcRtxThreadGetId) referenced 2 times from .\build\rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[80]">svcRtxThreadGetName</a> from .\build\rtx_thread.o(.text.svcRtxThreadGetName) referenced 2 times from .\build\rtx_thread.o(.text.osThreadGetName)
 <LI><a href="#[7b]">svcRtxThreadNew</a> from .\build\rtx_thread.o(.text.svcRtxThreadNew) referenced 2 times from .\build\rtx_thread.o(.text.osThreadContextNew)
 <LI><a href="#[81]">svcRtxThreadTerminate</a> from .\build\rtx_thread.o(.text.svcRtxThreadTerminate) referenced 2 times from .\build\rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[b3]">ticker_irq_handler</a> from .\build\mbed_ticker_api.o(.text.ticker_irq_handler) referenced from .\build\mbed_us_ticker_api.o(.data.irq_handler)
 <LI><a href="#[51]">timer_irq_handler</a> from .\build\hal_tick_32b.o(.text.timer_irq_handler) referenced 2 times from .\build\hal_tick_32b.o(.text.__NVIC_SetVector)
 <LI><a href="#[82]">uart1_irq</a> from .\build\serial_device.o(.text.uart1_irq) referenced 2 times from .\build\serial_device.o(.text.serial_irq_set)
 <LI><a href="#[83]">uart2_irq</a> from .\build\serial_device.o(.text.uart2_irq) referenced 2 times from .\build\serial_device.o(.text.serial_irq_set)
 <LI><a href="#[84]">uart3_irq</a> from .\build\serial_device.o(.text.uart3_irq) referenced 2 times from .\build\serial_device.o(.text.serial_irq_set)
 <LI><a href="#[85]">uart4_irq</a> from .\build\serial_device.o(.text.uart4_irq) referenced 2 times from .\build\serial_device.o(.text.serial_irq_set)
 <LI><a href="#[86]">uart5_irq</a> from .\build\serial_device.o(.text.uart5_irq) referenced 2 times from .\build\serial_device.o(.text.serial_irq_set)
 <LI><a href="#[ab]">us_ticker_clear_interrupt</a> from .\build\us_ticker_32b.o(.text.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[aa]">us_ticker_disable_interrupt</a> from .\build\us_ticker_32b.o(.text.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[ad]">us_ticker_fire_interrupt</a> from .\build\us_ticker_32b.o(.text.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[ae]">us_ticker_get_info</a> from .\build\mbed_retarget.o(.text.us_ticker_get_info) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[a8]">us_ticker_init</a> from .\build\us_ticker_32b.o(.text.us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[a9]">us_ticker_read</a> from .\build\us_ticker_32b.o(.text.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[ac]">us_ticker_set_interrupt</a> from .\build\us_ticker_32b.o(.text.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; mbed_start_main &rArr; osKernelStart &rArr; EvrRtxKernelError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ba]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[373]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[374]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[bb]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter_copy.o)(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[375]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[bc]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_n.o)(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[101]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_percent.o)(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[be]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_p.o)(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[c0]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_f.o)(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c2]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_e.o)(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c3]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_g.o)(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c4]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_a.o)(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[376]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_ll.o)(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[c6]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_i.o)(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c8]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_d.o)(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c9]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_u.o)(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ca]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_o.o)(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[cc]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_x.o)(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ce]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_lli.o)(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d0]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_lld.o)(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d1]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_llu.o)(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d2]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_llo.o)(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[d4]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_llx.o)(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[377]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_l.o)(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[d6]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_c.o)(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d8]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_s.o)(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[da]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_lc.o)(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[dc]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_ls.o)(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[378]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_percent_end.o)(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[33a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[379]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[de]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[37a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[37b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[37c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[37d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[37e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[37f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[380]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[381]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[382]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[383]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[384]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[385]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[386]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[387]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[388]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[389]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[38a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[38b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[38c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[38d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, .\build\irq_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[38e]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[38f]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[390]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(use_no_semi_2.o)(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtoc16
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18handle_open_errorsij
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[391]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[392]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>malloc_internal$concurrent</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_alloc_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f1]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_alloc_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[f3]"></a>free_internal$concurrent</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_free_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[f4]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_free_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = free &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_destroy
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
</UL>

<P><STRONG><a name="[393]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>

<P><STRONG><a name="[f7]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__2sprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendString(char*)
</UL>

<P><STRONG><a name="[f9]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[fa]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[f8]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[c7]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[fe]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[cd]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[d5]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[bf]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[ff]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__printf_flags_ss_wp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[102]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_scanf_int.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>

<P><STRONG><a name="[104]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(atoi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[106]"></a>_scanf_mbtowc</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_scanf_mbtowc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>

<P><STRONG><a name="[394]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fclose.o)(.text), UNUSED)

<P><STRONG><a name="[108]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[10c]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[10e]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[111]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[112]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[114]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(abort.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by_and_replace(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[262]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(memcmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const
</UL>

<P><STRONG><a name="[1a8]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::assign(const char*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::char_traits&lang;char&rang;::length(const char*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(const char*) const
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[21b]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strncmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by_and_replace(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[117]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[395]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memmove_v6.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::assign(const char*, unsigned)
</UL>

<P><STRONG><a name="[119]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memmove_v6.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[396]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memmove_v6.o)(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[397]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[398]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[399]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(aeabi_memset4.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[39a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(aeabi_memset4.o)(.text), UNUSED)

<P><STRONG><a name="[350]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
</UL>

<P><STRONG><a name="[11e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[39b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::Queue__sub_object()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::MemoryPool__sub_object()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[39c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[27b]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strcmpv7m.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[39e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[3a1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libspace.o)(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libspace.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[3a2]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_heap_descriptor_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e1]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_locale_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[3a4]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[121]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[df]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[123]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_init_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3a8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_init_threads.o)(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fc]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[fd]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_intcommon.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[bd]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_charcount.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[f6]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[45]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d7]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[d9]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[125]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[cf]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_longlong_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[128]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[cb]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[d3]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[103]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_chval.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[105]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strtol.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[10d]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fseek &rArr; _sys_istty &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[3a9]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[12e]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[109]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[131]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[132]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(setvbuf_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setvbuf &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[e6]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[134]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[135]"></a>_mbrtoc16</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_mbrtoc16.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[107]"></a>_mbrtowc</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_mbrtoc16.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[115]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_abrt_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[261]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(memchr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::find(char, unsigned) const
</UL>

<P><STRONG><a name="[3aa]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memmove_w.o)(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memmove_w.o)(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memmove_w.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[11b]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memmove_w.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[3ac]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memmove_w.o)(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(maybetermalloc2.o)(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_extend_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUpOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[127]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lludiv10.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[13f]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[142]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_hex.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[143]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[db]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[dd]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[129]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_strtoul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[12b]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[3ae]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[144]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_c16rtomb.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[126]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_c16rtomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[137]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_exit.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[136]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_abrt_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[133]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[122]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[148]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(term_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[141]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[13b]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(bigflt0.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[145]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[146]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[147]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[149]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_final_threads.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[14b]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_boot.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; main_th() &rArr; processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;) &rArr; Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[345]"></a>EvrRtxEventFlagsCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxEventFlagsCreated))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
</UL>

<P><STRONG><a name="[2d9]"></a>EvrRtxEventFlagsDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxEventFlagsDelete))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
</UL>

<P><STRONG><a name="[344]"></a>EvrRtxEventFlagsDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxEventFlagsDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
</UL>

<P><STRONG><a name="[151]"></a>EvrRtxEventFlagsError</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxEventFlagsError))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
</UL>

<P><STRONG><a name="[2da]"></a>EvrRtxEventFlagsNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxEventFlagsNew))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[2db]"></a>EvrRtxEventFlagsWait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxEventFlagsWait), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>

<P><STRONG><a name="[2ba]"></a>EvrRtxEventFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxEventFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
</UL>

<P><STRONG><a name="[2bb]"></a>EvrRtxEventFlagsWaitNotCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxEventFlagsWaitNotCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
</UL>

<P><STRONG><a name="[347]"></a>EvrRtxEventFlagsWaitPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxEventFlagsWaitPending))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
</UL>

<P><STRONG><a name="[30a]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[154]"></a>EvrRtxKernelError</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = EvrRtxKernelError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[2dd]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[2de]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[348]"></a>EvrRtxKernelInitializeCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxKernelInitializeCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[2df]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[34c]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[2f1]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[2f7]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[2f9]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[2fb]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[2f3]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[2f5]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[2e0]"></a>EvrRtxMemoryPoolAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
</UL>

<P><STRONG><a name="[2bf]"></a>EvrRtxMemoryPoolAllocFailed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolAllocFailed))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[34d]"></a>EvrRtxMemoryPoolAllocPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolAllocPending))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[30d]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2be]"></a>EvrRtxMemoryPoolAllocated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolAllocated))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[351]"></a>EvrRtxMemoryPoolCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolCreated))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
</UL>

<P><STRONG><a name="[2c4]"></a>EvrRtxMemoryPoolDeallocated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolDeallocated))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[2e1]"></a>EvrRtxMemoryPoolDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolDelete))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolDelete
</UL>

<P><STRONG><a name="[34f]"></a>EvrRtxMemoryPoolDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolDelete
</UL>

<P><STRONG><a name="[155]"></a>EvrRtxMemoryPoolError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxMemoryPoolError))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolDelete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[2e2]"></a>EvrRtxMemoryPoolFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolFree))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
</UL>

<P><STRONG><a name="[2c2]"></a>EvrRtxMemoryPoolFreeFailed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolFreeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[2e3]"></a>EvrRtxMemoryPoolNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMemoryPoolNew))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
</UL>

<P><STRONG><a name="[355]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueCreated))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[2e4]"></a>EvrRtxMessageQueueDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueDelete))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
</UL>

<P><STRONG><a name="[352]"></a>EvrRtxMessageQueueDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
</UL>

<P><STRONG><a name="[156]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2e5]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueGet))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[353]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueGetPending))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[30e]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2c9]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueInsertPending))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[2ff]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueInserted))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2e6]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[2ca]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueNotInserted))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[2c7]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2e7]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueuePut))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[356]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueuePutPending))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[30f]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2c6]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMessageQueueRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2e8]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[358]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[30b]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[302]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[35b]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexCreated))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[2e9]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexDelete))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[35a]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[157]"></a>EvrRtxMutexError</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[2ea]"></a>EvrRtxMutexNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[359]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[2eb]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[301]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[30c]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[305]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxSemaphoreAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[35d]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxSemaphoreCreated))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[325]"></a>EvrRtxSemaphoreDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxSemaphoreDelete))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[35c]"></a>EvrRtxSemaphoreDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxSemaphoreDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[158]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxSemaphoreError))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[326]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[327]"></a>EvrRtxSemaphoreRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxSemaphoreRelease))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[2cc]"></a>EvrRtxSemaphoreReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxSemaphoreReleased))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[31d]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[363]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[2d8]"></a>EvrRtxThreadDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadDelay))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[307]"></a>EvrRtxThreadDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[360]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[159]"></a>EvrRtxThreadError</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = EvrRtxThreadError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[15a]"></a>EvrRtxThreadExit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadExit &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[32c]"></a>EvrRtxThreadFlagsSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadFlagsSet))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[2ce]"></a>EvrRtxThreadFlagsSetDone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadFlagsSetDone))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[32d]"></a>EvrRtxThreadFlagsWait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>

<P><STRONG><a name="[319]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[362]"></a>EvrRtxThreadFlagsWaitNotCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadFlagsWaitNotCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[361]"></a>EvrRtxThreadFlagsWaitPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadFlagsWaitPending))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[308]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[32e]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[32f]"></a>EvrRtxThreadGetName</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadGetName))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetName
</UL>

<P><STRONG><a name="[35e]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[32b]"></a>EvrRtxThreadNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[31b]"></a>EvrRtxThreadSwitch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[15d]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxThreadTerminate))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[310]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[322]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[16b]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[367]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[15e]"></a>HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\stm32l1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[160]"></a>HAL_InitTick</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, .\build\hal_tick_32b.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[161]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[15f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[17c]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_pwr.o(.text.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
</UL>

<P><STRONG><a name="[169]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, .\build\stm32l1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[162]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[16c]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[163]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stm32l1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stm32l1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[16e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1066 bytes, Stack size 32 bytes, .\build\stm32l1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[170]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\stm32l1xx_hal_rtc_ex.o(.text.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_synchronize
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_ResumeTick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\hal_tick_32b.o(.text.HAL_ResumeTick))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
</UL>

<P><STRONG><a name="[2af]"></a>HAL_SuspendTick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\hal_tick_32b.o(.text.HAL_SuspendTick))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
</UL>

<P><STRONG><a name="[164]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\stm32l1xx_hal_tim.o(.text.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_OC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[171]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_tim.o(.text.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[167]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\stm32l1xx_hal_tim.o(.text.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[174]"></a>HAL_UART_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, .\build\stm32l1xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[175]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[320]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[34b]"></a>OS_Tick_Enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, .\build\os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[34a]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[349]"></a>OS_Tick_Setup</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, .\build\os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[183]"></a>SetSysClock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\system_clock.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
</UL>

<P><STRONG><a name="[184]"></a>SetSysClock_PLL_HSE</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, .\build\system_clock.o(.text.SetSysClock_PLL_HSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetSysClock_PLL_HSE &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[185]"></a>SetSysClock_PLL_HSI</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, .\build\system_clock.o(.text.SetSysClock_PLL_HSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[186]"></a>Set_GPIO_Clock</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, .\build\gpio_api.o(.text.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Set_GPIO_Clock &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
</UL>

<P><STRONG><a name="[2d6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, .\build\system_stm32l1xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, .\build\system_clock.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>ISR_thread()</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, .\build\main.o(.text._Z10ISR_threadv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ISR_thread() &rArr; rtos::Queue&lang;message_t, (unsigned)16&rang;::put(message_t*, unsigned, unsigned char) &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::getc()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::push_back(char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::assign(const char*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::char_traits&lang;char&rang;::length(const char*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::put(message_t*, unsigned, unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::alloc()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._Z7main_thv)
</UL>
<P><STRONG><a name="[1ab]"></a>sendString(char*)</STRONG> (Thumb, 40 bytes, Stack size 72 bytes, .\build\main.o(.text._Z10sendStringPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sendString(char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::puts(const char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_alive()
</UL>

<P><STRONG><a name="[48]"></a>send_alive()</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, .\build\main.o(.text._Z10send_alivev))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = send_alive() &rArr; mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float) &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendString(char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text._Z10send_alivev)
<LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[1af]"></a>processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)</STRONG> (Thumb, 1616 bytes, Stack size 200 bytes, .\build\main.o(.text._Z11processLineNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;) &rArr; Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::puts(const char*)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::~basic_string__sub_object()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::char_traits&lang;char&rang;::length(const char*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(const char*) const
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::~Tokenizer()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::next()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::operator int()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendString(char*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
</UL>

<P><STRONG><a name="[1b9]"></a>main_th()</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, .\build\main.o(.text._Z7main_thv))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = main_th() &rArr; processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;) &rArr; Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;T3()&rang; mbed::callback&lang;events::EventQueue, events::EventQueue, void&rang;(T2*, T3(T1::*)())
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::~basic_string__sub_object()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::char_traits&lang;char&rang;::length(const char*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::get(unsigned)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::free(message_t*)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;T1()&rang; mbed::callback&lang;void&rang;(T1(*)())
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator int()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[47]"></a>newInput()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\main.o(.text._Z8newInputv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = newInput() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text._Z10ISR_threadv)
<LI> main.o(.text._Z7main_thv)
</UL>
<P><STRONG><a name="[1d6]"></a>SingletonPtr&lang;rtos::Mutex&rang;::get()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, .\build\fatfilesystem.o(.text._ZN12SingletonPtrIN4rtos5MutexEE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16singleton_unlockv
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14singleton_lockv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>

<P><STRONG><a name="[1d9]"></a>SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\fatfilesystem.o(.text._ZN12SingletonPtrIN4rtos5MutexEEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1da]"></a>mbed::DigitalOut::read()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\busout.o(.text._ZN4mbed10DigitalOut4readEv))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9gpio_readP6gpio_t
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator int()
</UL>

<P><STRONG><a name="[1dc]"></a>mbed::DigitalOut::write(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\busout.o(.text._ZN4mbed10DigitalOut5writeEi))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10gpio_writeP6gpio_ti
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>

<P><STRONG><a name="[1de]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\busout.o(.text._ZN4mbed10DigitalOutC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbed::DigitalOut::DigitalOut__sub_object(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
</UL>

<P><STRONG><a name="[1b3]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[1bd]"></a>mbed::DigitalOut::operator int()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\main.o(.text._ZN4mbed10DigitalOutcviEv))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
</UL>

<P><STRONG><a name="[1e0]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::getc()
</UL>

<P><STRONG><a name="[1e2]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
</UL>

<P><STRONG><a name="[4c]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq) &rArr; mbed::Callback&lang;void()&rang;::operator ()() const &rArr; mbed::Callback&lang;void()&rang;::call() const &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator ()() const
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i)
</UL>
<P><STRONG><a name="[8f]"></a>mbed::SerialBase::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[1a1]"></a>mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newInput()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[90]"></a>mbed::SerialBase::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[1a5]"></a>mbed::SerialBase::readable()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase8readableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::SerialBase::readable() &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[1e9]"></a>mbed::SerialBase::SerialBase(PinName, PinName, int)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunk&lang;mbed::SerialBase&rang;::CThunk__sub_object(mbed::SerialBase*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::SerialBase&rang;::NonCopyable__sub_object()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[228]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::RawSerial(PinName, PinName, int)
</UL>

<P><STRONG><a name="[92]"></a>mbed::SerialBase::~SerialBase__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::SerialBase::~SerialBase__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[1ef]"></a>mbed::SerialBase::~SerialBase()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunk&lang;mbed::SerialBase&rang;::~CThunk__sub_object()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::SerialBase&rang;::~NonCopyable__sub_object()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[91]"></a>mbed::SerialBase::~SerialBase__sub_object()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::SerialBase::~SerialBase__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::~RawSerial__sub_object()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[1f3]"></a>mbed::TimerEvent::insert_absolute(unsigned long long)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent15insert_absoluteEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[4d]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.text._ZN4mbed10TimerEventC2Ev)
</UL>
<P><STRONG><a name="[1f5]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent()
</UL>

<P><STRONG><a name="[1f7]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::TimerEvent&rang;::NonCopyable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker__sub_object()
</UL>

<P><STRONG><a name="[94]"></a>mbed::TimerEvent::~TimerEvent__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[1fb]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::TimerEvent&rang;::~NonCopyable__sub_object()
</UL>

<P><STRONG><a name="[93]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[4e]"></a>mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event) &rArr; mbed::Callback&lang;void()&rang;::operator ()() const &rArr; mbed::Callback&lang;void()&rang;::call() const &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator ()() const
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interruptin.o(.text._ZN4mbed11InterruptInC2E7PinName)
</UL>
<P><STRONG><a name="[1fd]"></a>mbed::InterruptIn::InterruptIn(PinName)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::InterruptIn&rang;::NonCopyable__sub_object()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[3af]"></a>mbed::InterruptIn::InterruptIn__sub_object(PinName)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInC2E7PinName), UNUSED)

<P><STRONG><a name="[97]"></a>mbed::InterruptIn::~InterruptIn__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::InterruptIn::~InterruptIn__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interruptin.o(.rodata._ZTVN4mbed11InterruptInE)
</UL>
<P><STRONG><a name="[54]"></a>mbed::InterruptIn::~InterruptIn()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::InterruptIn::~InterruptIn() &rArr; gpio_irq_free &rArr; gpio_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::InterruptIn&rang;::~NonCopyable__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.__cxx_global_var_init.1)
<LI> main.o(.text.__cxx_global_var_init.2)
</UL>
<P><STRONG><a name="[96]"></a>mbed::InterruptIn::~InterruptIn__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::InterruptIn::~InterruptIn__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interruptin.o(.rodata._ZTVN4mbed11InterruptInE)
</UL>
<P><STRONG><a name="[22e]"></a>mbed::NonCopyable&lang;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\main.o(.text._ZN4mbed11NonCopyableIN4rtos10MemoryPoolI9message_tLj16EEEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::MemoryPool__sub_object()
</UL>

<P><STRONG><a name="[231]"></a>mbed::NonCopyable&lang;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\main.o(.text._ZN4mbed11NonCopyableIN4rtos10MemoryPoolI9message_tLj16EEEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::~MemoryPool__sub_object()
</UL>

<P><STRONG><a name="[234]"></a>mbed::NonCopyable&lang;rtos::Mutex&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mutex.o(.text._ZN4mbed11NonCopyableIN4rtos5MutexEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
</UL>

<P><STRONG><a name="[236]"></a>mbed::NonCopyable&lang;rtos::Mutex&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mutex.o(.text._ZN4mbed11NonCopyableIN4rtos5MutexEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
</UL>

<P><STRONG><a name="[23a]"></a>mbed::NonCopyable&lang;rtos::Queue&lang;message_t, (unsigned)16&rang;&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\main.o(.text._ZN4mbed11NonCopyableIN4rtos5QueueI9message_tLj16EEEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::Queue__sub_object()
</UL>

<P><STRONG><a name="[23d]"></a>mbed::NonCopyable&lang;rtos::Queue&lang;message_t, (unsigned)16&rang;&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\main.o(.text._ZN4mbed11NonCopyableIN4rtos5QueueI9message_tLj16EEEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::~Queue__sub_object()
</UL>

<P><STRONG><a name="[248]"></a>mbed::NonCopyable&lang;rtos::Thread&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_shared_queues.o(.text._ZN4mbed11NonCopyableIN4rtos6ThreadEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*)
</UL>

<P><STRONG><a name="[24b]"></a>mbed::NonCopyable&lang;rtos::Thread&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\thread.o(.text._ZN4mbed11NonCopyableIN4rtos6ThreadEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[24f]"></a>mbed::NonCopyable&lang;rtos::Semaphore&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\semaphore.o(.text._ZN4mbed11NonCopyableIN4rtos9SemaphoreEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
</UL>

<P><STRONG><a name="[251]"></a>mbed::NonCopyable&lang;rtos::Semaphore&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\semaphore.o(.text._ZN4mbed11NonCopyableIN4rtos9SemaphoreEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
</UL>

<P><STRONG><a name="[256]"></a>mbed::NonCopyable&lang;events::EventQueue&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\eventqueue.o(.text._ZN4mbed11NonCopyableIN6events10EventQueueEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::EventQueue(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[25a]"></a>mbed::NonCopyable&lang;events::EventQueue&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\eventqueue.o(.text._ZN4mbed11NonCopyableIN6events10EventQueueEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::~EventQueue()
</UL>

<P><STRONG><a name="[1ea]"></a>mbed::NonCopyable&lang;mbed::SerialBase&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN4mbed11NonCopyableINS_10SerialBaseEEC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1f2]"></a>mbed::NonCopyable&lang;mbed::SerialBase&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN4mbed11NonCopyableINS_10SerialBaseEED2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
</UL>

<P><STRONG><a name="[1f8]"></a>mbed::NonCopyable&lang;mbed::TimerEvent&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed11NonCopyableINS_10TimerEventEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[1fc]"></a>mbed::NonCopyable&lang;mbed::TimerEvent&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed11NonCopyableINS_10TimerEventEED2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent()
</UL>

<P><STRONG><a name="[1fe]"></a>mbed::NonCopyable&lang;mbed::InterruptIn&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\interruptin.o(.text._ZN4mbed11NonCopyableINS_11InterruptInEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[202]"></a>mbed::NonCopyable&lang;mbed::InterruptIn&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\interruptin.o(.text._ZN4mbed11NonCopyableINS_11InterruptInEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn()
</UL>

<P><STRONG><a name="[20c]"></a>mbed::NonCopyable&lang;mbed::Timer&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\timer.o(.text._ZN4mbed11NonCopyableINS_5TimerEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
</UL>

<P><STRONG><a name="[211]"></a>mbed::NonCopyable&lang;mbed::Ticker&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\equeue_mbed.o(.text._ZN4mbed11NonCopyableINS_6TickerEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker__sub_object()
</UL>

<P><STRONG><a name="[212]"></a>mbed::NonCopyable&lang;mbed::Ticker&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\ticker.o(.text._ZN4mbed11NonCopyableINS_6TickerEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker__sub_object()
</UL>

<P><STRONG><a name="[229]"></a>mbed::NonCopyable&lang;mbed::RawSerial&rang;::NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rawserial.o(.text._ZN4mbed11NonCopyableINS_9RawSerialEEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::RawSerial(PinName, PinName, int)
</UL>

<P><STRONG><a name="[22a]"></a>mbed::NonCopyable&lang;mbed::RawSerial&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\greentea_serial.o(.text._ZN4mbed11NonCopyableINS_9RawSerialEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::~RawSerial__sub_object()
</UL>

<P><STRONG><a name="[203]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\spi.o(.text._ZN4mbed11TransactionINS_3SPIEEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object() &rArr; mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t__sub_object()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object()
</UL>

<P><STRONG><a name="[205]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\spi.o(.text._ZN4mbed11TransactionINS_3SPIEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object() &rArr; mbed::transaction_t::~transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::~transaction_t__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer__sub_object()
</UL>

<P><STRONG><a name="[204]"></a>mbed::transaction_t::transaction_t__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\spi.o(.text._ZN4mbed13transaction_tC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()
</UL>

<P><STRONG><a name="[206]"></a>mbed::transaction_t::~transaction_t__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\spi.o(.text._ZN4mbed13transaction_tD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::transaction_t::~transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object()
</UL>

<P><STRONG><a name="[207]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\spi.o(.text._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object() &rArr; mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object() &rArr; mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[52]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\spi.o(.text._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer__sub_object() &rArr; mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object() &rArr; mbed::transaction_t::~transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[208]"></a>mbed::Timer::read_high_resolution_us()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\timer.o(.text._ZN4mbed5Timer23read_high_resolution_usEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbed::Timer::read_high_resolution_us() &rArr; mbed::Timer::slicetime() &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>

<P><STRONG><a name="[1d3]"></a>mbed::Timer::reset()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\timer.o(.text._ZN4mbed5Timer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::Timer::reset() &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18equeue_tick_updatev
</UL>

<P><STRONG><a name="[1c9]"></a>mbed::Timer::start()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\timer.o(.text._ZN4mbed5Timer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::Timer::start() &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16equeue_tick_initv
</UL>

<P><STRONG><a name="[1d2]"></a>mbed::Timer::read_ms()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\timer.o(.text._ZN4mbed5Timer7read_msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbed::Timer::read_ms() &rArr; mbed::Timer::read_high_resolution_us() &rArr; mbed::Timer::slicetime() &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18equeue_tick_updatev
</UL>

<P><STRONG><a name="[209]"></a>mbed::Timer::slicetime()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\timer.o(.text._ZN4mbed5Timer9slicetimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbed::Timer::slicetime() &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
</UL>

<P><STRONG><a name="[1c7]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\timer.o(.text._ZN4mbed5TimerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbed::Timer::Timer() &rArr; mbed::Timer::reset() &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::Timer&rang;::NonCopyable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16equeue_tick_initv
</UL>

<P><STRONG><a name="[3b0]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\timer.o(.text._ZN4mbed5TimerC2Ev), UNUSED)

<P><STRONG><a name="[20d]"></a>mbed::Ticker::setup(unsigned long long)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\ticker.o(.text._ZN4mbed6Ticker5setupEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
</UL>

<P><STRONG><a name="[1ae]"></a>mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, .\build\main.o(.text._ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float) &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_alive()
</UL>

<P><STRONG><a name="[1ad]"></a>mbed::Ticker::detach()</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, .\build\ticker.o(.text._ZN4mbed6Ticker6detachEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker__sub_object()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_alive()
</UL>

<P><STRONG><a name="[99]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\ticker.o(.text._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator ()() const
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticker.o(.rodata._ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[1ca]"></a>mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, .\build\equeue_mbed.o(.text._ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16equeue_tick_initv
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float)
</UL>

<P><STRONG><a name="[1c8]"></a>mbed::Ticker::Ticker__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\equeue_mbed.o(.text._ZN4mbed6TickerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbed::Ticker::Ticker__sub_object() &rArr; mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::Ticker&rang;::NonCopyable__sub_object()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16equeue_tick_initv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.44
</UL>

<P><STRONG><a name="[98]"></a>mbed::Ticker::~Ticker__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\ticker.o(.text._ZN4mbed6TickerD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbed::Ticker::~Ticker__deallocating() &rArr; mbed::Ticker::~Ticker__sub_object() &rArr; mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticker.o(.rodata._ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[59]"></a>mbed::Ticker::~Ticker__sub_object()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\ticker.o(.text._ZN4mbed6TickerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbed::Ticker::~Ticker__sub_object() &rArr; mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::Ticker&rang;::~NonCopyable__sub_object()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ticker.o(.rodata._ZTVN4mbed6TickerE)
<LI> main.o(.text.__cxx_global_var_init.44)
</UL>
<P><STRONG><a name="[9f]"></a>void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\eventqueue.o(.text._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi))
<BR>[Address Reference Count : 1]<UL><LI> eventqueue.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[a1]"></a>void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\eventqueue.o(.text._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> eventqueue.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[a0]"></a>void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\eventqueue.o(.text._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> eventqueue.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[213]"></a>void mbed::Callback&lang;void(int)&rang;::generate&lang;void(*)(int)&rang;(const T1&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\eventqueue.o(.text._ZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>

<P><STRONG><a name="[1ec]"></a>mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\eventqueue.o(.text._ZN4mbed8CallbackIFviEEC2EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::Callback&lang;void(int)&rang;::generate&lang;void(*)(int)&rang;(const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::EventQueue(unsigned, unsigned char*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t__sub_object()
</UL>

<P><STRONG><a name="[1f0]"></a>mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\eventqueue.o(.text._ZN4mbed8CallbackIFviEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::~EventQueue()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::~transaction_t__sub_object()
</UL>

<P><STRONG><a name="[a2]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;&rang;(const void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_shared_queues.o(.text._ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvPKv))
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;::operator ()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_shared_queues.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvRKT_E3ops)
</UL>
<P><STRONG><a name="[a5]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv))
<BR>[Address Reference Count : 1]<UL><LI> atcmdparser.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[a4]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_shared_queues.o(.text._ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvPv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_shared_queues.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvRKT_E3ops)
</UL>
<P><STRONG><a name="[a7]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> atcmdparser.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[a3]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_shared_queues.o(.text._ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_shared_queues.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvRKT_E3ops)
</UL>
<P><STRONG><a name="[a6]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> atcmdparser.o(.rodata._ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[217]"></a>mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;::method_context__sub_object(events::EventQueue*, void(events::EventQueue::*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_shared_queues.o(.text._ZN4mbed8CallbackIFvvEE14method_contextIN6events10EventQueueEMS5_FvvEEC2EPS5_S7_))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object&lang;events::EventQueue, events::EventQueue&rang;(T2*, void(T1::*)())
</UL>

<P><STRONG><a name="[218]"></a>void mbed::Callback&lang;void()&rang;::generate&lang;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;&rang;(const T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\mbed_shared_queues.o(.text._ZN4mbed8CallbackIFvvEE8generateINS2_14method_contextIN6events10EventQueueEMS6_FvvEEEEEvRKT_))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object&lang;events::EventQueue, events::EventQueue&rang;(T2*, void(T1::*)())
</UL>

<P><STRONG><a name="[215]"></a>void mbed::Callback&lang;void()&rang;::generate&lang;void(*)()&rang;(const T1&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
</UL>

<P><STRONG><a name="[1a0]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEEC2EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::Callback&lang;void()&rang;::generate&lang;void(*)()&rang;(const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker__sub_object()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16equeue_tick_initv
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;T1()&rang; mbed::callback&lang;void&rang;(T1(*)())
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newInput()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_alive()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[20e]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEEC2ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback__sub_object(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float)
</UL>

<P><STRONG><a name="[216]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object&lang;events::EventQueue, events::EventQueue&rang;(T2*, void(T1::*)())</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, .\build\mbed_shared_queues.o(.text._ZN4mbed8CallbackIFvvEEC2IN6events10EventQueueES5_EEPT0_MT_FvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback__sub_object&lang;events::EventQueue, events::EventQueue&rang;(T2*, void(T1::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::Callback&lang;void()&rang;::generate&lang;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;&rang;(const T1&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;::method_context__sub_object(events::EventQueue*, void(events::EventQueue::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;T3()&rang; mbed::callback&lang;events::EventQueue, events::EventQueue, void&rang;(T2*, T3(T1::*)())
</UL>

<P><STRONG><a name="[1a2]"></a>mbed::Callback&lang;void()&rang;::~Callback__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::~Callback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16equeue_tick_initv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker__sub_object()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newInput()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_alive()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[1e6]"></a>mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\atcmdparser.o(.text._ZN4mbed8CallbackIFvvEEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&) &rArr; mbed::Callback&lang;void()&rang;::Callback__sub_object(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
</UL>

<P><STRONG><a name="[21f]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filebase.o(.text._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>

<P><STRONG><a name="[219]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, .\build\filebase.o(.text._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[21d]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[21e]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[220]"></a>mbed::FilePath::file()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[27c]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[221]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[27e]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[222]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\filepath.o(.text._ZN4mbed8FilePathC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[3b1]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\filepath.o(.text._ZN4mbed8FilePathC2EPKc), UNUSED)

<P><STRONG><a name="[1ba]"></a>mbed::Callback&lang;T3()&rang; mbed::callback&lang;events::EventQueue, events::EventQueue, void&rang;(T2*, T3(T1::*)())</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_shared_queues.o(.text._ZN4mbed8callbackIN6events10EventQueueES2_vEENS_8CallbackIFT1_vEEEPT0_MT_FS4_vE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Callback&lang;T3()&rang; mbed::callback&lang;events::EventQueue, events::EventQueue, void&rang;(T2*, T3(T1::*)()) &rArr; mbed::Callback&lang;void()&rang;::Callback__sub_object&lang;events::EventQueue, events::EventQueue&rang;(T2*, void(T1::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object&lang;events::EventQueue, events::EventQueue&rang;(T2*, void(T1::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
</UL>

<P><STRONG><a name="[1bc]"></a>mbed::Callback&lang;T1()&rang; mbed::callback&lang;void&rang;(T1(*)())</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN4mbed8callbackIvEENS_8CallbackIFT_vEEEPS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Callback&lang;T1()&rang; mbed::callback&lang;void&rang;(T1(*)()) &rArr; mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
</UL>

<P><STRONG><a name="[223]"></a>mbed::DigitalIn::read()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\busin.o(.text._ZN4mbed9DigitalIn4readEv))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9gpio_readP6gpio_t
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::operator int()
</UL>

<P><STRONG><a name="[225]"></a>mbed::DigitalIn::DigitalIn__sub_object(PinName)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\busin.o(.text._ZN4mbed9DigitalInC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbed::DigitalIn::DigitalIn__sub_object(PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
</UL>

<P><STRONG><a name="[1b5]"></a>mbed::DigitalIn::operator int()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\main.o(.text._ZN4mbed9DigitalIncviEv))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[1a6]"></a>mbed::RawSerial::getc()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\rawserial.o(.text._ZN4mbed9RawSerial4getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::RawSerial::getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[9a]"></a>mbed::RawSerial::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rawserial.o(.text._ZN4mbed9RawSerial4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> rawserial.o(.rodata._ZTVN4mbed9RawSerialE)
</UL>
<P><STRONG><a name="[226]"></a>mbed::RawSerial::putc(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\rawserial.o(.text._ZN4mbed9RawSerial4putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::RawSerial::putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::puts(const char*)
</UL>

<P><STRONG><a name="[1ac]"></a>mbed::RawSerial::puts(const char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\rawserial.o(.text._ZN4mbed9RawSerial4putsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::RawSerial::puts(const char*) &rArr; mbed::RawSerial::putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendString(char*)
</UL>

<P><STRONG><a name="[9b]"></a>mbed::RawSerial::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rawserial.o(.text._ZN4mbed9RawSerial6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> rawserial.o(.rodata._ZTVN4mbed9RawSerialE)
</UL>
<P><STRONG><a name="[227]"></a>mbed::RawSerial::RawSerial(PinName, PinName, int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\rawserial.o(.text._ZN4mbed9RawSerialC2E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::RawSerial::RawSerial(PinName, PinName, int) &rArr; mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::RawSerial&rang;::NonCopyable__sub_object()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
</UL>

<P><STRONG><a name="[3b2]"></a>mbed::RawSerial::RawSerial__sub_object(PinName, PinName, int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\rawserial.o(.text._ZN4mbed9RawSerialC2E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[9c]"></a>mbed::RawSerial::~RawSerial__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\rawserial.o(.text._ZN4mbed9RawSerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::RawSerial::~RawSerial__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::~RawSerial__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rawserial.o(.rodata._ZTVN4mbed9RawSerialE)
</UL>
<P><STRONG><a name="[5a]"></a>mbed::RawSerial::~RawSerial__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\greentea_serial.o(.text._ZN4mbed9RawSerialD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::RawSerial::~RawSerial__sub_object() &rArr; mbed::SerialBase::~SerialBase__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;mbed::RawSerial&rang;::~NonCopyable__sub_object()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::~RawSerial__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rawserial.o(.rodata._ZTVN4mbed9RawSerialE)
<LI> main.o(.text.__cxx_global_var_init.7)
</UL>
<P><STRONG><a name="[1bf]"></a>rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::free(message_t*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\main.o(.text._ZN4rtos10MemoryPoolI9message_tLj16EE4freeEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::free(message_t*) &rArr; osMemoryPoolFree &rArr; isrRtxMemoryPoolFree &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
</UL>

<P><STRONG><a name="[1a7]"></a>rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::alloc()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\main.o(.text._ZN4rtos10MemoryPoolI9message_tLj16EE5allocEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::alloc() &rArr; osMemoryPoolAlloc &rArr; isrRtxMemoryPoolAlloc &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[22d]"></a>rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::MemoryPool__sub_object()</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, .\build\main.o(.text._ZN4rtos10MemoryPoolI9message_tLj16EEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::MemoryPool__sub_object() &rArr; osMemoryPoolNew &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;&rang;::NonCopyable__sub_object()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
</UL>

<P><STRONG><a name="[57]"></a>rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::~MemoryPool__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN4rtos10MemoryPoolI9message_tLj16EED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::~MemoryPool__sub_object() &rArr; osMemoryPoolDelete &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolDelete
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;&rang;::~NonCopyable__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init.39)
</UL>
<P><STRONG><a name="[232]"></a>rtos::Mutex::constructor(const char*)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, .\build\mutex.o(.text._ZN4rtos5Mutex11constructorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
</UL>

<P><STRONG><a name="[21a]"></a>rtos::Mutex::lock(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5Mutex4lockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtos::Mutex::lock(unsigned) &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::_thunk(void*)
</UL>

<P><STRONG><a name="[21c]"></a>rtos::Mutex::unlock()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mutex.o(.text._ZN4rtos5Mutex6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtos::Mutex::unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[1d7]"></a>rtos::Mutex::Mutex()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::Mutex&rang;::NonCopyable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.41
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
</UL>

<P><STRONG><a name="[3b3]"></a>rtos::Mutex::Mutex__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexC2Ev), UNUSED)

<P><STRONG><a name="[56]"></a>rtos::Mutex::~Mutex()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::Mutex&rang;::~NonCopyable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.__cxx_global_var_init.15)
<LI> main.o(.text.__cxx_global_var_init.41)
</UL>
<P><STRONG><a name="[3b4]"></a>rtos::Mutex::~Mutex__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexD2Ev), UNUSED)

<P><STRONG><a name="[1be]"></a>rtos::Queue&lang;message_t, (unsigned)16&rang;::get(unsigned)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, .\build\main.o(.text._ZN4rtos5QueueI9message_tLj16EE3getEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = rtos::Queue&lang;message_t, (unsigned)16&rang;::get(unsigned) &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
</UL>

<P><STRONG><a name="[1a9]"></a>rtos::Queue&lang;message_t, (unsigned)16&rang;::put(message_t*, unsigned, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\main.o(.text._ZN4rtos5QueueI9message_tLj16EE3putEPS1_jh))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = rtos::Queue&lang;message_t, (unsigned)16&rang;::put(message_t*, unsigned, unsigned char) &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[239]"></a>rtos::Queue&lang;message_t, (unsigned)16&rang;::Queue__sub_object()</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, .\build\main.o(.text._ZN4rtos5QueueI9message_tLj16EEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = rtos::Queue&lang;message_t, (unsigned)16&rang;::Queue__sub_object() &rArr; osMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::Queue&lang;message_t, (unsigned)16&rang;&rang;::NonCopyable__sub_object()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.40
</UL>

<P><STRONG><a name="[58]"></a>rtos::Queue&lang;message_t, (unsigned)16&rang;::~Queue__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN4rtos5QueueI9message_tLj16EED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = rtos::Queue&lang;message_t, (unsigned)16&rang;::~Queue__sub_object() &rArr; osMessageQueueDelete &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::Queue&lang;message_t, (unsigned)16&rang;&rang;::~NonCopyable__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init.40)
</UL>
<P><STRONG><a name="[23e]"></a>rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, .\build\thread.o(.text._ZN4rtos6Thread11constructorE12osPriority_tjPhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*)
</UL>

<P><STRONG><a name="[23f]"></a>rtos::Thread::wait(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\thread.o(.text._ZN4rtos6Thread4waitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtos::Thread::wait(unsigned) &rArr; osDelay &rArr; EvrRtxThreadError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[1bb]"></a>rtos::Thread::start(mbed::Callback&lang;void()&rang;)</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, .\build\thread.o(.text._ZN4rtos6Thread5startEN4mbed8CallbackIFvvEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = rtos::Thread::start(mbed::Callback&lang;void()&rang;) &rArr; rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
</UL>

<P><STRONG><a name="[4f]"></a>rtos::Thread::_thunk(void*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\thread.o(.text._ZN4rtos6Thread6_thunkEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = rtos::Thread::_thunk(void*) &rArr; rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator ()() const
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._ZN4rtos6Thread5startEN4mbed8CallbackIFvvEEE)
</UL>
<P><STRONG><a name="[245]"></a>rtos::Thread::terminate()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, .\build\thread.o(.text._ZN4rtos6Thread9terminateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = rtos::Thread::terminate() &rArr; rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[247]"></a>rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, .\build\mbed_shared_queues.o(.text._ZN4rtos6ThreadC2E12osPriority_tjPhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*) &rArr; rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::Thread&rang;::NonCopyable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
</UL>

<P><STRONG><a name="[9e]"></a>rtos::Thread::~Thread__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\thread.o(.text._ZN4rtos6ThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtos::Thread::~Thread__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.rodata._ZTVN4rtos6ThreadE)
</UL>
<P><STRONG><a name="[55]"></a>rtos::Thread::~Thread()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, .\build\thread.o(.text._ZN4rtos6ThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = rtos::Thread::~Thread() &rArr; rtos::Thread::terminate() &rArr; rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::Thread&rang;::~NonCopyable__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.__cxx_global_var_init.9)
<LI> main.o(.text.__cxx_global_var_init.10)
</UL>
<P><STRONG><a name="[9d]"></a>rtos::Thread::~Thread__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, .\build\thread.o(.text._ZN4rtos6ThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtos::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.rodata._ZTVN4rtos6ThreadE)
</UL>
<P><STRONG><a name="[24c]"></a>rtos::Semaphore::constructor(int, unsigned short)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, .\build\semaphore.o(.text._ZN4rtos9Semaphore11constructorEit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
</UL>

<P><STRONG><a name="[244]"></a>rtos::Semaphore::release()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\semaphore.o(.text._ZN4rtos9Semaphore7releaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::_thunk(void*)
</UL>

<P><STRONG><a name="[249]"></a>rtos::Semaphore::Semaphore(int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\semaphore.o(.text._ZN4rtos9SemaphoreC2Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::Semaphore&rang;::NonCopyable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*)
</UL>

<P><STRONG><a name="[3b5]"></a>rtos::Semaphore::Semaphore__sub_object(int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\semaphore.o(.text._ZN4rtos9SemaphoreC2Ei), UNUSED)

<P><STRONG><a name="[24a]"></a>rtos::Semaphore::~Semaphore()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\semaphore.o(.text._ZN4rtos9SemaphoreD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::~Semaphore() &rArr; osSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;rtos::Semaphore&rang;::~NonCopyable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[3b6]"></a>rtos::Semaphore::~Semaphore__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\semaphore.o(.text._ZN4rtos9SemaphoreD2Ev), UNUSED)

<P><STRONG><a name="[50]"></a>CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\serialbase.o(.text._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.text._ZN6CThunkIN4mbed10SerialBaseEE4initEPS1_MS1_FvPvES4_)
</UL>
<P><STRONG><a name="[252]"></a>CThunk&lang;mbed::SerialBase&rang;::init(mbed::SerialBase*, void(mbed::SerialBase::*)(void*), void*)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN6CThunkIN4mbed10SerialBaseEE4initEPS1_MS1_FvPvES4_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunk&lang;mbed::SerialBase&rang;::CThunk__sub_object(mbed::SerialBase*)
</UL>

<P><STRONG><a name="[1eb]"></a>CThunk&lang;mbed::SerialBase&rang;::CThunk__sub_object(mbed::SerialBase*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\serialbase.o(.text._ZN6CThunkIN4mbed10SerialBaseEEC2EPS1_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunk&lang;mbed::SerialBase&rang;::init(mbed::SerialBase*, void(mbed::SerialBase::*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1f1]"></a>CThunk&lang;mbed::SerialBase&rang;::~CThunk__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN6CThunkIN4mbed10SerialBaseEED2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
</UL>

<P><STRONG><a name="[49]"></a>events::EventQueue::dispatch_forever()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_shared_queues.o(.text._ZN6events10EventQueue16dispatch_foreverEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._Z7main_thv)
</UL>
<P><STRONG><a name="[253]"></a>events::EventQueue::dispatch(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\eventqueue.o(.text._ZN6events10EventQueue8dispatchEi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
</UL>

<P><STRONG><a name="[255]"></a>events::EventQueue::EventQueue(unsigned, unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\eventqueue.o(.text._ZN6events10EventQueueC2EjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = events::EventQueue::EventQueue(unsigned, unsigned char*) &rArr; equeue_create &rArr; equeue_create_inplace &rArr; equeue_sema_create &rArr; osEventFlagsNew &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;events::EventQueue&rang;::NonCopyable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
</UL>

<P><STRONG><a name="[3b7]"></a>events::EventQueue::EventQueue__sub_object(unsigned, unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\eventqueue.o(.text._ZN6events10EventQueueC2EjPh), UNUSED)

<P><STRONG><a name="[5b]"></a>events::EventQueue::~EventQueue()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\eventqueue.o(.text._ZN6events10EventQueueD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = events::EventQueue::~EventQueue() &rArr; equeue_destroy &rArr; equeue_sema_destroy &rArr; osEventFlagsDelete &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_destroy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::NonCopyable&lang;events::EventQueue&rang;::~NonCopyable__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.__cxx_global_var_init.8)
</UL>
<P><STRONG><a name="[3b8]"></a>events::EventQueue::~EventQueue__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\eventqueue.o(.text._ZN6events10EventQueueD2Ev), UNUSED)

<P><STRONG><a name="[25b]"></a>Tokenizer::isDelimiter(char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\tokenizer.o(.text._ZN9Tokenizer11isDelimiterEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Tokenizer::isDelimiter(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::find(char, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::skipDelimiter()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::next()
</UL>

<P><STRONG><a name="[25d]"></a>Tokenizer::skipDelimiter()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\tokenizer.o(.text._ZN9Tokenizer13skipDelimiterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tokenizer::skipDelimiter() &rArr; Tokenizer::isDelimiter(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::isDelimiter(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::next()
</UL>

<P><STRONG><a name="[1b1]"></a>Tokenizer::next()</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, .\build\tokenizer.o(.text._ZN9Tokenizer4nextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Tokenizer::next() &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::skipDelimiter()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::isDelimiter(char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::push_back(char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::char_traits&lang;char&rang;::length(const char*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::char_traits&lang;char&rang;::assign(char&, const char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[1b0]"></a>Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\tokenizer.o(.text._ZN9TokenizerC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::char_traits&lang;char&rang;::length(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[3b9]"></a>Tokenizer::Tokenizer__sub_object(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\tokenizer.o(.text._ZN9TokenizerC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_), UNUSED)

<P><STRONG><a name="[1b8]"></a>Tokenizer::~Tokenizer()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\tokenizer.o(.text._ZN9TokenizerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Tokenizer::~Tokenizer()
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::~basic_string__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[3ba]"></a>Tokenizer::~Tokenizer__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\tokenizer.o(.text._ZN9TokenizerD2Ev), UNUSED)

<P><STRONG><a name="[214]"></a>mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;::operator ()() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\mbed_shared_queues.o(.text._ZNK4mbed8CallbackIFvvEE14method_contextIN6events10EventQueueEMS5_FvvEEclEv))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::Callback&lang;void()&rang;::function_call&lang;mbed::Callback&lang;void()&rang;::method_context&lang;events::EventQueue, void(events::EventQueue::*)()&rang;&rang;(const void*)
</UL>

<P><STRONG><a name="[260]"></a>mbed::Callback&lang;void()&rang;::call() const</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\serialbase.o(.text._ZNK4mbed8CallbackIFvvEE4callEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbed::Callback&lang;void()&rang;::call() const &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator ()() const
</UL>

<P><STRONG><a name="[1e5]"></a>mbed::Callback&lang;void()&rang;::operator ()() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\atcmdparser.o(.text._ZNK4mbed8CallbackIFvvEEclEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbed::Callback&lang;void()&rang;::operator ()() const &rArr; mbed::Callback&lang;void()&rang;::call() const &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::call() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::_thunk(void*)
</UL>

<P><STRONG><a name="[1e4]"></a>mbed::Callback&lang;void()&rang;::operator bool() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\equeue_mbed.o(.text._ZNK4mbed8CallbackIFvvEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
</UL>

<P><STRONG><a name="[25c]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::find(char, unsigned) const</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::isDelimiter(char)
</UL>

<P><STRONG><a name="[1b7]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(const char*) const</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(const char*) const &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[1b2]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(unsigned, unsigned, const char*, unsigned) const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::compare(const char*) const
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[25e]"></a>std::__1::char_traits&lang;char&rang;::assign(char&, const char&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\main.o(.text._ZNSt3__111char_traitsIcE6assignERcRKc))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::next()
</UL>

<P><STRONG><a name="[19e]"></a>std::__1::char_traits&lang;char&rang;::length(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\main.o(.text._ZNSt3__111char_traitsIcE6lengthEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__1::char_traits&lang;char&rang;::length(const char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::next()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[263]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by_and_replace(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char*)</STRONG> (Thumb, 190 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::assign(const char*, unsigned)
</UL>

<P><STRONG><a name="[19f]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::next()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1aa]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::assign(const char*)</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::assign(const char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[265]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::assign(const char*, unsigned)</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by_and_replace(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[267]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::push_back(char)
</UL>

<P><STRONG><a name="[1a4]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::push_back(char)</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::push_back(char) &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::next()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[25f]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::next()
</UL>

<P><STRONG><a name="[3bb]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_), UNUSED)

<P><STRONG><a name="[268]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::~basic_string()</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[53]"></a>std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::~basic_string__sub_object()</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcpp_w.l(string.cpp.o)(.text._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tokenizer::~Tokenizer()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.__cxx_global_var_init)
<LI> tokenizer.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[243]"></a>operator delete[] (void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator delete[] (void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
</UL>

<P><STRONG><a name="[1ee]"></a>operator delete (void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator delete (void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn__deallocating()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::~RawSerial__deallocating()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__deallocating()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker__deallocating()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__deallocating()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by_and_replace(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char*)
</UL>

<P><STRONG><a name="[241]"></a>operator new[] (unsigned)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
</UL>

<P><STRONG><a name="[264]"></a>operator new(unsigned)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__grow_by_and_replace(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char*)
</UL>

<P><STRONG><a name="[26a]"></a>__cxa_atexit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.__cxa_atexit))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.44
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.41
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.40
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[95]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[b9]"></a>__rt_entry</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_boot.o(.text.__rt_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; mbed_start_main &rArr; osKernelStart &rArr; EvrRtxKernelError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_set_stack_heap
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_cpy_nvic
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[ec]"></a>__user_perthread_libspace</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, .\build\rtx_lib.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[26b]"></a>__user_setup_stackheap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.__user_setup_stackheap))
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbed_user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[273]"></a>_mbed_user_setup_stackheap</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._mbed_user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b4]"></a>_mutex_acquire</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\rtx_lib.o(.text._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[b6]"></a>_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_lib.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[113]"></a>_mutex_initialize</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, .\build\mbed_boot.o(.text._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _mutex_initialize &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[b5]"></a>_mutex_release</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\rtx_lib.o(.text._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[26f]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10a]"></a>_sys_close</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sys_close &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[116]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[12c]"></a>_sys_flen</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[12a]"></a>_sys_istty</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sys_istty &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[110]"></a>_sys_open</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18handle_open_errorsij
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17openmode_to_posixi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11init_serialv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[12f]"></a>_sys_seek</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sys_seek &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[130]"></a>_sys_write</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11init_serialv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[33b]"></a>_ticker_match_interval_passed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(.text._ticker_match_interval_passed))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[14a]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[269]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(abort_message.cpp.o)(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[280]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[284]"></a>core_util_atomic_decr_u16</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_critical.o(.text.core_util_atomic_decr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = core_util_atomic_decr_u16 &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
</UL>

<P><STRONG><a name="[285]"></a>core_util_atomic_incr_u16</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_critical.o(.text.core_util_atomic_incr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = core_util_atomic_incr_u16 &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
</UL>

<P><STRONG><a name="[1cd]"></a>core_util_critical_section_enter</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_lock
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17default_idle_hookv
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
</UL>

<P><STRONG><a name="[1d1]"></a>core_util_critical_section_exit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_unlock
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17default_idle_hookv
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
</UL>

<P><STRONG><a name="[27f]"></a>core_util_is_isr_active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_is_isr_active))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[258]"></a>equeue_create</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\equeue.o(.text.equeue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = equeue_create &rArr; equeue_create_inplace &rArr; equeue_sema_create &rArr; osEventFlagsNew &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::EventQueue(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[257]"></a>equeue_create_inplace</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\equeue.o(.text.equeue_create_inplace))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = equeue_create_inplace &rArr; equeue_sema_create &rArr; osEventFlagsNew &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_create
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::EventQueue(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[28b]"></a>equeue_dealloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\equeue.o(.text.equeue_dealloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mem_dealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
</UL>

<P><STRONG><a name="[259]"></a>equeue_destroy</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\equeue.o(.text.equeue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = equeue_destroy &rArr; equeue_sema_destroy &rArr; osEventFlagsDelete &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_destroy
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_destroy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::~EventQueue()
</UL>

<P><STRONG><a name="[254]"></a>equeue_dispatch</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, .\build\equeue.o(.text.equeue_dispatch), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_wait
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_unlock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_lock
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dealloc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tickdiff
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_incid
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_enqueue
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dequeue
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_clampdiff
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::dispatch(int)
</UL>

<P><STRONG><a name="[28a]"></a>equeue_mutex_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\equeue_mbed.o(.text.equeue_mutex_create))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
</UL>

<P><STRONG><a name="[290]"></a>equeue_mutex_destroy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\equeue_mbed.o(.text.equeue_mutex_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_destroy
</UL>

<P><STRONG><a name="[28e]"></a>equeue_mutex_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\equeue_mbed.o(.text.equeue_mutex_lock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mem_dealloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_enqueue
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dequeue
</UL>

<P><STRONG><a name="[28f]"></a>equeue_mutex_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\equeue_mbed.o(.text.equeue_mutex_unlock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mem_dealloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_enqueue
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dequeue
</UL>

<P><STRONG><a name="[289]"></a>equeue_sema_create</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, .\build\equeue_mbed.o(.text.equeue_sema_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = equeue_sema_create &rArr; osEventFlagsNew &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
</UL>

<P><STRONG><a name="[291]"></a>equeue_sema_destroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\equeue_mbed.o(.text.equeue_sema_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = equeue_sema_destroy &rArr; osEventFlagsDelete &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_destroy
</UL>

<P><STRONG><a name="[294]"></a>equeue_sema_wait</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\equeue_mbed.o(.text.equeue_sema_wait), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
</UL>

<P><STRONG><a name="[288]"></a>equeue_tick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\equeue_mbed.o(.text.equeue_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = equeue_tick &rArr; _ZL16equeue_tick_initv &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16equeue_tick_initv
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
</UL>

<P><STRONG><a name="[153]"></a>error</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\mbed_error.o(.text.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[299]"></a>exit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[1f9]"></a>get_us_ticker_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[276]"></a>gpio_dir</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\gpio_api.o(.text.gpio_dir))
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[275]"></a>gpio_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\gpio_api.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[200]"></a>gpio_init_in</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_gpio.o(.text.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn__sub_object(PinName)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[29d]"></a>gpio_init_in_ex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_gpio.o(.text.gpio_init_in_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[1df]"></a>gpio_init_out</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_gpio.o(.text.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut__sub_object(PinName)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[29e]"></a>gpio_init_out_ex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_gpio.o(.text.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[2a0]"></a>gpio_irq_disable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\gpio_irq_api.o(.text.gpio_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableRisingTrig_0_31
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableFallingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
</UL>

<P><STRONG><a name="[2a6]"></a>gpio_irq_enable</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, .\build\gpio_irq_api.o(.text.gpio_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_0_31
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
</UL>

<P><STRONG><a name="[201]"></a>gpio_irq_free</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, .\build\gpio_irq_api.o(.text.gpio_irq_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq_free &rArr; gpio_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn()
</UL>

<P><STRONG><a name="[1ff]"></a>gpio_irq_init</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, .\build\gpio_irq_api.o(.text.gpio_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = gpio_irq_init &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[277]"></a>gpio_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_api.o(.text.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[29c]"></a>gpio_set</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[2ae]"></a>hal_deepsleep</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\sleep.o(.text.hal_deepsleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hal_deepsleep &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_synchronize
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[2b3]"></a>hal_sleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\sleep.o(.text.hal_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hal_sleep &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[2b5]"></a>init_uart</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = init_uart &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[14d]"></a>$Super$$main</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, .\build\main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; main_th() &rArr; processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;) &rArr; Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_th()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendString(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d8]"></a>mbed_assert_internal</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\mbed_assert.o(.text.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::call() const
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::Queue__sub_object()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::MemoryPool__sub_object()
</UL>

<P><STRONG><a name="[29a]"></a>mbed_die</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, .\build\mbed_board.o(.text.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2d4]"></a>mbed_error_printf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, .\build\mbed_board.o(.text.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = mbed_error_printf &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[298]"></a>mbed_error_vfprintf</STRONG> (Thumb, 96 bytes, Stack size 144 bytes, .\build\mbed_board.o(.text.mbed_error_vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[14c]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_boot.o(.text.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26e]"></a>mbed_sdk_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mbed_overrides.o(.text.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[26c]"></a>mbed_set_stack_heap</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, .\build\mbed_boot.o(.text.mbed_set_stack_heap))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[270]"></a>mbed_start_main</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, .\build\mbed_boot.o(.text.mbed_start_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mbed_start_main &rArr; osKernelStart &rArr; EvrRtxKernelError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[240]"></a>osDelay</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osDelay &rArr; EvrRtxThreadError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
</UL>

<P><STRONG><a name="[296]"></a>osEventFlagsDelete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\rtx_evflags.o(.text.osEventFlagsDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = osEventFlagsDelete &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_destroy
</UL>

<P><STRONG><a name="[295]"></a>osEventFlagsNew</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, .\build\rtx_evflags.o(.text.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = osEventFlagsNew &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsNew
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_create
</UL>

<P><STRONG><a name="[297]"></a>osEventFlagsWait</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\rtx_evflags.o(.text.osEventFlagsWait), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWait
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_wait
</UL>

<P><STRONG><a name="[2dc]"></a>osKernelGetState</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[27a]"></a>osKernelInitialize</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; EvrRtxKernelError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[2d7]"></a>osKernelStart</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
</UL>

<P><STRONG><a name="[22c]"></a>osMemoryPoolAlloc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.osMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = osMemoryPoolAlloc &rArr; isrRtxMemoryPoolAlloc &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolAlloc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::alloc()
</UL>

<P><STRONG><a name="[230]"></a>osMemoryPoolDelete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\rtx_mempool.o(.text.osMemoryPoolDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = osMemoryPoolDelete &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::~MemoryPool__sub_object()
</UL>

<P><STRONG><a name="[22b]"></a>osMemoryPoolFree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.osMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = osMemoryPoolFree &rArr; isrRtxMemoryPoolFree &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::free(message_t*)
</UL>

<P><STRONG><a name="[22f]"></a>osMemoryPoolNew</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.osMemoryPoolNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osMemoryPoolNew &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolNew
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::MemoryPool__sub_object()
</UL>

<P><STRONG><a name="[23c]"></a>osMessageQueueDelete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\rtx_msgqueue.o(.text.osMessageQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = osMessageQueueDelete &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::~Queue__sub_object()
</UL>

<P><STRONG><a name="[237]"></a>osMessageQueueGet</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::get(unsigned)
</UL>

<P><STRONG><a name="[23b]"></a>osMessageQueueNew</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::Queue__sub_object()
</UL>

<P><STRONG><a name="[238]"></a>osMessageQueuePut</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::put(message_t*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1c5]"></a>osMutexAcquire</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14singleton_lockv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[235]"></a>osMutexDelete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMutexDelete &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[233]"></a>osMutexNew</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
</UL>

<P><STRONG><a name="[1cc]"></a>osMutexRelease</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMutexRelease &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16singleton_unlockv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[272]"></a>osRtxErrorNotify</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[87]"></a>osRtxEventFlagsPostProcess</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\rtx_evflags.o(.text.osRtxEventFlagsPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxEventFlagsPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.svcRtxEventFlagsNew)
</UL>
<P><STRONG><a name="[88]"></a>osRtxIdleThread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_idle_loop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[2f0]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, .\build\rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[2f2]"></a>osRtxMemoryFree</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, .\build\rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolDelete
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[2f4]"></a>osRtxMemoryInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[2bd]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; atomic_inc32_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32_lt
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolAlloc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[2c1]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryPoolFree &rArr; atomic_link_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_put
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolDelete
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[2fa]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[8a]"></a>osRtxMemoryPoolPostProcess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxMemoryPoolPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(.text.svcRtxMemoryPoolNew)
</UL>
<P><STRONG><a name="[8b]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[300]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[e8]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, .\build\rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[2c3]"></a>osRtxPostProcess</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPendSV
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[8c]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[314]"></a>osRtxThreadBlock</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[31e]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[31f]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[306]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDelayCompleted
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[303]"></a>osRtxThreadDispatch</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolDelete
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[2fc]"></a>osRtxThreadListGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolDelete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[318]"></a>osRtxThreadListPut</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[2ed]"></a>osRtxThreadListRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[309]"></a>osRtxThreadListRoot</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[317]"></a>osRtxThreadListSort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListSort
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[8e]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[311]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2fe]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[31a]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[315]"></a>osRtxThreadSwitch</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitch
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[31c]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, .\build\rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[2ee]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolDelete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[e9]"></a>osRtxTick_Handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, .\build\rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[89]"></a>osRtxTimerThread</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[77]"></a>osRtxTimerTick</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, .\build\rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerThread)
</UL>
<P><STRONG><a name="[250]"></a>osSemaphoreDelete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(.text.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = osSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
</UL>

<P><STRONG><a name="[24d]"></a>osSemaphoreNew</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>

<P><STRONG><a name="[24e]"></a>osSemaphoreRelease</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
</UL>

<P><STRONG><a name="[1c0]"></a>osSignalSet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\cmsis_os1.o(.text.osSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osSignalSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newInput()
</UL>

<P><STRONG><a name="[1a3]"></a>osSignalWait</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\build\cmsis_os1.o(.text.osSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSignalWait &rArr; osThreadFlagsWait &rArr; EvrRtxThreadError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[32a]"></a>osThreadContextNew</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, .\build\rtx_thread.o(.text.osThreadContextNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osThreadContextNew &rArr; EvrRtxThreadError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[8d]"></a>osThreadExit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadExit &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[328]"></a>osThreadFlagsSet</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSet
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[329]"></a>osThreadFlagsWait</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadFlagsWait &rArr; EvrRtxThreadError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>

<P><STRONG><a name="[15b]"></a>osThreadGetId</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_thread()
</UL>

<P><STRONG><a name="[2ec]"></a>osThreadGetName</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[242]"></a>osThreadNew</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osThreadNew &rArr; osThreadContextNew &rArr; EvrRtxThreadError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
</UL>

<P><STRONG><a name="[246]"></a>osThreadTerminate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osThreadTerminate &rArr; EvrRtxThreadError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[2ad]"></a>pin_function</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, .\build\pinmap.o(.text.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>

<P><STRONG><a name="[2ac]"></a>pin_mode</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, .\build\pinmap.o(.text.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_GetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[338]"></a>pinmap_find_peripheral</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[336]"></a>pinmap_merge</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = pinmap_merge &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[337]"></a>pinmap_peripheral</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = pinmap_peripheral &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[339]"></a>pinmap_pinout</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[63]"></a>pre_main</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, .\build\mbed_boot.o(.text.pre_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = pre_main &rArr; main &rArr; $Super$$main &rArr; main_th() &rArr; processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;) &rArr; Tokenizer::Tokenizer(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&, const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::basic_string(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_boot.o(.text.mbed_start_main)
</UL>
<P><STRONG><a name="[2b2]"></a>rtc_synchronize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtc_api.o(.text.rtc_synchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_synchronize &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
</UL>

<P><STRONG><a name="[2ef]"></a>rtos_idle_loop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text.rtos_idle_loop))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>

<P><STRONG><a name="[1c3]"></a>serial_baud</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_baud &rArr; init_uart &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11init_serialv
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1e1]"></a>serial_getc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\serial_device.o(.text.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>

<P><STRONG><a name="[1c2]"></a>serial_init</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, .\build\serial_device.o(.text.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11init_serialv
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1ed]"></a>serial_irq_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.serial_irq_handler), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1e7]"></a>serial_irq_set</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, .\build\serial_device.o(.text.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_irq_set
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[1e3]"></a>serial_putc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\serial_device.o(.text.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[1e8]"></a>serial_readable</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, .\build\serial_api.o(.text.serial_readable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>

<P><STRONG><a name="[33f]"></a>serial_writable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\serial_api.o(.text.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[340]"></a>sleep_manager_can_deep_sleep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\mbed_sleep_manager.o(.text.sleep_manager_can_deep_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[1ce]"></a>sleep_manager_lock_deep_sleep</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(.text.sleep_manager_lock_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = sleep_manager_lock_deep_sleep &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17default_idle_hookv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[1d5]"></a>sleep_manager_sleep_auto</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(.text.sleep_manager_sleep_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sleep_manager_sleep_auto &rArr; hal_sleep &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_can_deep_sleep
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5sleepv
</UL>

<P><STRONG><a name="[1d0]"></a>sleep_manager_unlock_deep_sleep</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(.text.sleep_manager_unlock_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = sleep_manager_unlock_deep_sleep &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17default_idle_hookv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
</UL>

<P><STRONG><a name="[64]"></a>svcRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[65]"></a>svcRtxEventFlagsDelete</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, .\build\rtx_evflags.o(.text.svcRtxEventFlagsDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxEventFlagsDelete &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsDelete)
</UL>
<P><STRONG><a name="[66]"></a>svcRtxEventFlagsNew</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, .\build\rtx_evflags.o(.text.svcRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = svcRtxEventFlagsNew &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsNew)
</UL>
<P><STRONG><a name="[67]"></a>svcRtxEventFlagsWait</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, .\build\rtx_evflags.o(.text.svcRtxEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = svcRtxEventFlagsWait &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitPending
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitNotCompleted
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsWait)
</UL>
<P><STRONG><a name="[68]"></a>svcRtxKernelGetState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[69]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelInitialize &rArr; EvrRtxKernelError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Initialize
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitializeCompleted
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[6a]"></a>svcRtxKernelStart</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; EvrRtxKernelError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[6b]"></a>svcRtxMemoryPoolAlloc</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.svcRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = svcRtxMemoryPoolAlloc &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocated
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocPending
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocFailed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(.text.osMemoryPoolAlloc)
</UL>
<P><STRONG><a name="[6c]"></a>svcRtxMemoryPoolDelete</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.svcRtxMemoryPoolDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = svcRtxMemoryPoolDelete &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(.text.osMemoryPoolDelete)
</UL>
<P><STRONG><a name="[6d]"></a>svcRtxMemoryPoolFree</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, .\build\rtx_mempool.o(.text.svcRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxMemoryPoolFree &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolFreeFailed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolDeallocated
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(.text.osMemoryPoolFree)
</UL>
<P><STRONG><a name="[6e]"></a>svcRtxMemoryPoolNew</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, .\build\rtx_mempool.o(.text.svcRtxMemoryPoolNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = svcRtxMemoryPoolNew &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolCreated
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(.text.osMemoryPoolNew)
</UL>
<P><STRONG><a name="[6f]"></a>svcRtxMessageQueueDelete</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueDelete &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueDelete)
</UL>
<P><STRONG><a name="[70]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[71]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[72]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[73]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[74]"></a>svcRtxMutexDelete</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[75]"></a>svcRtxMutexNew</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryPoolAlloc &rArr; atomic_inc32_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[76]"></a>svcRtxMutexRelease</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[78]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(.text.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = svcRtxSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, .\build\rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = svcRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[7c]"></a>svcRtxThreadExit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[7e]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, .\build\rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitPending
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitNotCompleted
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxThreadGetId</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[80]"></a>svcRtxThreadGetName</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.svcRtxThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetName)
</UL>
<P><STRONG><a name="[7b]"></a>svcRtxThreadNew</STRONG> (Thumb, 712 bytes, Stack size 56 bytes, .\build\rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadContextNew)
</UL>
<P><STRONG><a name="[81]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[15c]"></a>thread_terminate_hook</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\thread.o(.text.thread_terminate_hook))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>

<P><STRONG><a name="[1f4]"></a>ticker_insert_event_us</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.ticker_insert_event_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>

<P><STRONG><a name="[b3]"></a>ticker_irq_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.data.irq_handler)
</UL>
<P><STRONG><a name="[364]"></a>ticker_read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(.text.ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[20a]"></a>ticker_read_us</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(.text.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>

<P><STRONG><a name="[1f6]"></a>ticker_remove_event</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ticker_remove_event &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[1fa]"></a>ticker_set_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_handler
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[51]"></a>timer_irq_handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, .\build\hal_tick_32b.o(.text.timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tick_32b.o(.text.__NVIC_SetVector)
</UL>
<P><STRONG><a name="[ab]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(.text.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[aa]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(.text.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[ad]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(.text.us_ticker_fire_interrupt))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_CC1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[ae]"></a>us_ticker_get_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.us_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[a8]"></a>us_ticker_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(.text.us_ticker_init))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[366]"></a>us_ticker_irq_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.us_ticker_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[a9]"></a>us_ticker_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(.text.us_ticker_read))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[ac]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(.text.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[1b4]"></a>wait_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_wait_api_rtos.o(.text.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[1b6]"></a>wait_us</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, .\build\mbed_wait_api_rtos.o(.text.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processLine(std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;)
</UL>

<P><STRONG><a name="[13c]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[36b]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[36a]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[36c]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[36d]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[13d]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13e]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[36e]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[140]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\m_ws.l(fpclassify.o)(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[100]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__printf_wp.o)(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[43]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lc_numeric_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ws.l(fmul.o)(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float)
</UL>

<P><STRONG><a name="[36f]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ws.l(fmul.o)(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[371]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ws.l(fnaninf.o)(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_f
</UL>

<P><STRONG><a name="[370]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ws.l(fretinf.o)(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_f2ulz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ws.l(ffixull.o)(x$fpl$llufromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(mbed::Callback&lang;void()&rang;, float)
</UL>

<P><STRONG><a name="[372]"></a>_ll_ufrom_f</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ws.l(ffixull.o)(x$fpl$llufromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[c1]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ws.l(printf1.o)(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[c5]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ws.l(printf2.o)(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[224]"></a>_ZL9gpio_readP6gpio_t</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\busin.o(.text._ZL9gpio_readP6gpio_t))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
</UL>

<P><STRONG><a name="[1dd]"></a>_ZL10gpio_writeP6gpio_ti</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\busout.o(.text._ZL10gpio_writeP6gpio_ti))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
</UL>

<P><STRONG><a name="[1db]"></a>_ZL9gpio_readP6gpio_t</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\busout.o(.text._ZL9gpio_readP6gpio_t))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::read()
</UL>

<P><STRONG><a name="[286]"></a>equeue_clampdiff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\equeue.o(.text.equeue_clampdiff), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tickdiff
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_enqueue
</UL>

<P><STRONG><a name="[28d]"></a>equeue_dequeue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, .\build\equeue.o(.text.equeue_dequeue), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_unlock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tickdiff
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
</UL>

<P><STRONG><a name="[292]"></a>equeue_enqueue</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, .\build\equeue.o(.text.equeue_enqueue), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_unlock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tickdiff
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_clampdiff
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
</UL>

<P><STRONG><a name="[293]"></a>equeue_incid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\equeue.o(.text.equeue_incid), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
</UL>

<P><STRONG><a name="[28c]"></a>equeue_mem_dealloc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\equeue.o(.text.equeue_mem_dealloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_unlock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dealloc
</UL>

<P><STRONG><a name="[287]"></a>equeue_tickdiff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\equeue.o(.text.equeue_tickdiff), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dispatch
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_enqueue
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_dequeue
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_clampdiff
</UL>

<P><STRONG><a name="[1c6]"></a>_ZL16equeue_tick_initv</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, .\build\equeue_mbed.o(.text._ZL16equeue_tick_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _ZL16equeue_tick_initv &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker__sub_object()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick
</UL>

<P><STRONG><a name="[4b]"></a>_ZL18equeue_tick_updatev</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\equeue_mbed.o(.text._ZL18equeue_tick_updatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _ZL18equeue_tick_updatev &rArr; mbed::Timer::read_ms() &rArr; mbed::Timer::read_high_resolution_us() &rArr; mbed::Timer::slicetime() &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> equeue_mbed.o(.text._ZL16equeue_tick_initv)
</UL>
<P><STRONG><a name="[1c4]"></a>_ZL14singleton_lockv</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\fatfilesystem.o(.text._ZL14singleton_lockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ZL14singleton_lockv &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>

<P><STRONG><a name="[1cb]"></a>_ZL16singleton_unlockv</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fatfilesystem.o(.text._ZL16singleton_unlockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL16singleton_unlockv &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>

<P><STRONG><a name="[29b]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\gpio_api.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[2a2]"></a>LL_EXTI_DisableFallingTrig_0_31</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.LL_EXTI_DisableFallingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>

<P><STRONG><a name="[2a3]"></a>LL_EXTI_DisableIT_0_31</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.LL_EXTI_DisableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>

<P><STRONG><a name="[2a1]"></a>LL_EXTI_DisableRisingTrig_0_31</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.LL_EXTI_DisableRisingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>

<P><STRONG><a name="[2a9]"></a>LL_EXTI_EnableFallingTrig_0_31</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.LL_EXTI_EnableFallingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>

<P><STRONG><a name="[2a7]"></a>LL_EXTI_EnableIT_0_31</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.LL_EXTI_EnableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>

<P><STRONG><a name="[2a8]"></a>LL_EXTI_EnableRisingTrig_0_31</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.LL_EXTI_EnableRisingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>

<P><STRONG><a name="[2a5]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>

<P><STRONG><a name="[2a4]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>

<P><STRONG><a name="[2aa]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>

<P><STRONG><a name="[2ab]"></a>__NVIC_SetVector</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.__NVIC_SetVector))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
</UL>

<P><STRONG><a name="[5c]"></a>gpio_irq0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq0))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gpio_irq0 &rArr; handle_interrupt_in &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[5d]"></a>gpio_irq1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq1))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gpio_irq1 &rArr; handle_interrupt_in &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[5e]"></a>gpio_irq2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq2))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gpio_irq2 &rArr; handle_interrupt_in &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[5f]"></a>gpio_irq3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq3))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gpio_irq3 &rArr; handle_interrupt_in &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[60]"></a>gpio_irq4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq4))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gpio_irq4 &rArr; handle_interrupt_in &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[61]"></a>gpio_irq5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq5))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gpio_irq5 &rArr; handle_interrupt_in &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[62]"></a>gpio_irq6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq6))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gpio_irq6 &rArr; handle_interrupt_in &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[29f]"></a>handle_interrupt_in</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, .\build\gpio_irq_api.o(.text.handle_interrupt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = handle_interrupt_in &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq6
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq5
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq3
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq1
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq0
</UL>

<P><STRONG><a name="[166]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\hal_tick_32b.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[165]"></a>__NVIC_SetVector</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\hal_tick_32b.o(.text.__NVIC_SetVector))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2d5]"></a>gpio_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_board.o(.text.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[26d]"></a>mbed_cpy_nvic</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\mbed_boot.o(.text.mbed_cpy_nvic))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[274]"></a>_gpio_init_in</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(.text._gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>

<P><STRONG><a name="[278]"></a>_gpio_init_out</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(.text._gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[279]"></a>gpio_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_gpio.o(.text.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[1c1]"></a>_ZL11init_serialv</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL11init_serialv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _ZL11init_serialv &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[27d]"></a>_ZL17openmode_to_posixi</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZL17openmode_to_posixi))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1d4]"></a>_ZL18handle_open_errorsij</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZL18handle_open_errorsij))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ZL18handle_open_errorsij &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[152]"></a>error_msg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.error_msg))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
</UL>

<P><STRONG><a name="[b2]"></a>_ZL17default_idle_hookv</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(.text._ZL17default_idle_hookv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _ZL17default_idle_hookv &rArr; _ZL5sleepv &rArr; sleep_manager_sleep_auto &rArr; hal_sleep &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5sleepv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtx_idle.o(.data._ZL14idle_hook_fptr)
</UL>
<P><STRONG><a name="[1cf]"></a>_ZL5sleepv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text._ZL5sleepv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _ZL5sleepv &rArr; sleep_manager_sleep_auto &rArr; hal_sleep &rArr; core_util_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17default_idle_hookv
</UL>

<P><STRONG><a name="[283]"></a>compute_tick</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.compute_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = compute_tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[2b6]"></a>initialize</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(.text.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>

<P><STRONG><a name="[2b8]"></a>schedule_interrupt</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ticker_match_interval_passed
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[365]"></a>set_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(.text.set_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>

<P><STRONG><a name="[2b7]"></a>update_present_time</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[335]"></a>LL_GPIO_GetPinMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_GetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[342]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
</UL>

<P><STRONG><a name="[343]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
</UL>

<P><STRONG><a name="[332]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[333]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[341]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
</UL>

<P><STRONG><a name="[330]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[334]"></a>stm_pin_PullConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.stm_pin_PullConfig))
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[331]"></a>stm_pin_SetAFPin</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.stm_pin_SetAFPin))
<BR><BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[14e]"></a>EventFlagsCheck</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.text.EventFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EventFlagsCheck &rArr; atomic_chk32_any
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_any
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
</UL>

<P><STRONG><a name="[14f]"></a>atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\rtx_evflags.o(.text.atomic_chk32_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>

<P><STRONG><a name="[150]"></a>atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\rtx_evflags.o(.text.atomic_chk32_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_chk32_any
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>

<P><STRONG><a name="[2b9]"></a>isrRtxEventFlagsWait</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, .\build\rtx_evflags.o(.text.isrRtxEventFlagsWait), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitNotCompleted
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>

<P><STRONG><a name="[346]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
</UL>

<P><STRONG><a name="[17d]"></a>SVC_Initialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.SVC_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SVC_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[17e]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Initialize
</UL>

<P><STRONG><a name="[271]"></a>os_kernel_is_active</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\rtx_lib.o(.text.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[281]"></a>atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.text.atomic_dec32_nz))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
</UL>

<P><STRONG><a name="[2f6]"></a>atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\rtx_mempool.o(.text.atomic_inc32_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc32_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[282]"></a>atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.text.atomic_link_get))
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
</UL>

<P><STRONG><a name="[2f8]"></a>atomic_link_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\rtx_mempool.o(.text.atomic_link_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[2bc]"></a>isrRtxMemoryPoolAlloc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.isrRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = isrRtxMemoryPoolAlloc &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocated
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
</UL>

<P><STRONG><a name="[2c0]"></a>isrRtxMemoryPoolFree</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.isrRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = isrRtxMemoryPoolFree &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolFreeFailed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolDeallocated
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
</UL>

<P><STRONG><a name="[34e]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[177]"></a>MessageQueueGet</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr8
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[17a]"></a>MessageQueuePut</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, .\build\rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2fd]"></a>MessageQueueRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[178]"></a>atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.atomic_dec32_nz))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[17b]"></a>atomic_inc32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.atomic_inc32))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[179]"></a>atomic_wr8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.atomic_wr8))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[2c5]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2c8]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[354]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[357]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[17f]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(.text.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[181]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(.text.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[180]"></a>atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.text.atomic_dec16_nz))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[182]"></a>atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(.text.atomic_inc16_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>

<P><STRONG><a name="[2cb]"></a>isrRtxSemaphoreRelease</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(.text.isrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[304]"></a>SetPendSV</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.SetPendSV))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[2d0]"></a>atomic_dec16_nz</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.atomic_dec16_nz))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[2d1]"></a>atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\rtx_system.o(.text.atomic_inc16_lim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[2d3]"></a>atomic_inc16_lt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\rtx_system.o(.text.atomic_inc16_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[2cf]"></a>isr_queue_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\rtx_system.o(.text.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_get &rArr; atomic_inc16_lim
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lim
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[2d2]"></a>isr_queue_put</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\rtx_system.o(.text.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[321]"></a>osRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[187]"></a>ThreadFlagsCheck</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck &rArr; atomic_chk32_any
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_any
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[18a]"></a>ThreadFlagsSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.ThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsSet &rArr; atomic_set32
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[188]"></a>atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.atomic_chk32_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[189]"></a>atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.atomic_chk32_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_chk32_any
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[18b]"></a>atomic_set32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.atomic_set32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
</UL>

<P><STRONG><a name="[2cd]"></a>isrRtxThreadFlagsSet</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.isrRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[312]"></a>osRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[316]"></a>osRtxThreadFree</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree &rArr; atomic_link_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[313]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[35f]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[324]"></a>TimerInsert</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, .\build\rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[323]"></a>TimerUnlink</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_timer.o(.text.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[33e]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[33d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[33c]"></a>__NVIC_SetVector</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.__NVIC_SetVector))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[82]"></a>uart1_irq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[83]"></a>uart2_irq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[84]"></a>uart3_irq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.uart3_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart3_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[85]"></a>uart4_irq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.uart4_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart4_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[86]"></a>uart5_irq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_device.o(.text.uart5_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart5_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[368]"></a>uart_irq</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, .\build\serial_device.o(.text.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_irq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_irq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_irq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_irq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq
</UL>

<P><STRONG><a name="[af]"></a>_GLOBAL__sub_I_SPI.cpp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\spi.o(.text._GLOBAL__sub_I_SPI.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _GLOBAL__sub_I_SPI.cpp &rArr; __cxx_global_var_init &rArr; mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object() &rArr; mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object() &rArr; mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[18c]"></a>__cxx_global_var_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\spi.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init &rArr; mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object() &rArr; mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object() &rArr; mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SPI.cpp
</UL>

<P><STRONG><a name="[168]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[16f]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, .\build\stm32l1xx_hal_rcc.o(.text.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[172]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, .\build\stm32l1xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[173]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\stm32l1xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>

<P><STRONG><a name="[176]"></a>UART_SetConfig</STRONG> (Thumb, 630 bytes, Stack size 32 bytes, .\build\stm32l1xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[369]"></a>LL_TIM_GenerateEvent_CC1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(.text.LL_TIM_GenerateEvent_CC1))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_fire_interrupt
</UL>

<P><STRONG><a name="[b0]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, .\build\main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxx_global_var_init.8 &rArr; events::EventQueue::EventQueue(unsigned, unsigned char*) &rArr; equeue_create &rArr; equeue_create_inplace &rArr; equeue_sema_create &rArr; osEventFlagsNew &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.44
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.41
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.40
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[18e]"></a>__cxx_global_var_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::char_traits&lang;char&rang;::length(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[18f]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.1 &rArr; mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[198]"></a>__cxx_global_var_init.10</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\main.o(.text.__cxx_global_var_init.10))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.10 &rArr; rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*) &rArr; rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[199]"></a>__cxx_global_var_init.15</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.15))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __cxx_global_var_init.15 &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[190]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.2 &rArr; mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[191]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\main.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.3 &rArr; mbed::DigitalIn::DigitalIn__sub_object(PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[19a]"></a>__cxx_global_var_init.39</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.39))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.39 &rArr; rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::MemoryPool__sub_object() &rArr; osMemoryPoolNew &rArr; EvrRtxMemoryPoolError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;message_t, (unsigned)16&rang;::MemoryPool__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[192]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\main.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.4 &rArr; mbed::DigitalIn::DigitalIn__sub_object(PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[19b]"></a>__cxx_global_var_init.40</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.40))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.40 &rArr; rtos::Queue&lang;message_t, (unsigned)16&rang;::Queue__sub_object() &rArr; osMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;message_t, (unsigned)16&rang;::Queue__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[19c]"></a>__cxx_global_var_init.41</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.41))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __cxx_global_var_init.41 &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[19d]"></a>__cxx_global_var_init.44</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.44))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __cxx_global_var_init.44 &rArr; mbed::Ticker::Ticker__sub_object() &rArr; mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker__sub_object()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[193]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\main.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_var_init.5 &rArr; mbed::DigitalOut::DigitalOut__sub_object(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[194]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\main.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_var_init.6 &rArr; mbed::DigitalOut::DigitalOut__sub_object(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[195]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.7 &rArr; mbed::RawSerial::RawSerial(PinName, PinName, int) &rArr; mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::RawSerial(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[196]"></a>__cxx_global_var_init.8</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.8 &rArr; events::EventQueue::EventQueue(unsigned, unsigned char*) &rArr; equeue_create &rArr; equeue_create_inplace &rArr; equeue_sema_create &rArr; osEventFlagsNew &rArr; EvrRtxEventFlagsError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::EventQueue(unsigned, unsigned char*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[197]"></a>__cxx_global_var_init.9</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\main.o(.text.__cxx_global_var_init.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.9 &rArr; rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*) &rArr; rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned, unsigned char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[b1]"></a>_GLOBAL__sub_I_Tokenizer.cpp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\tokenizer.o(.text._GLOBAL__sub_I_Tokenizer.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_Tokenizer.cpp &rArr; __cxx_global_var_init &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tokenizer.o(.init_array)
</UL>
<P><STRONG><a name="[18d]"></a>__cxx_global_var_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\tokenizer.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init &rArr; std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;::__init(const char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::char_traits&lang;char&rang;::length(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Tokenizer.cpp
</UL>

<P><STRONG><a name="[ee]"></a>AlignUp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_alloc_threads.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>

<P><STRONG><a name="[ed]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_alloc_threads.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[10f]"></a>_freopen_locked</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[46]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>AlignUpOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_extend_threads.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[13a]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, I:\HDDProgInstall\keil\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
